
Duubel v3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800436c  0800436c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800436c  0800436c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800436c  0800436c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800436c  0800436c  0001436c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004370  08004370  00014370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000018  0800438c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  0800438c  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b90  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002794  00000000  00000000  00030c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  000333a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d51  00000000  00000000  000344a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011cf0  00000000  00000000  000351f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000137d7  00000000  00000000  00046ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000697fc  00000000  00000000  0005a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004738  00000000  00000000  000c3eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000c85ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080042cc 	.word	0x080042cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080042cc 	.word	0x080042cc

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b45      	ldr	r3, [pc, #276]	; (8000278 <MX_GPIO_Init+0x12c>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a44      	ldr	r2, [pc, #272]	; (8000278 <MX_GPIO_Init+0x12c>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b42      	ldr	r3, [pc, #264]	; (8000278 <MX_GPIO_Init+0x12c>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b3f      	ldr	r3, [pc, #252]	; (8000278 <MX_GPIO_Init+0x12c>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a3e      	ldr	r2, [pc, #248]	; (8000278 <MX_GPIO_Init+0x12c>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b3c      	ldr	r3, [pc, #240]	; (8000278 <MX_GPIO_Init+0x12c>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b39      	ldr	r3, [pc, #228]	; (8000278 <MX_GPIO_Init+0x12c>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a38      	ldr	r2, [pc, #224]	; (8000278 <MX_GPIO_Init+0x12c>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b36      	ldr	r3, [pc, #216]	; (8000278 <MX_GPIO_Init+0x12c>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b33      	ldr	r3, [pc, #204]	; (8000278 <MX_GPIO_Init+0x12c>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a32      	ldr	r2, [pc, #200]	; (8000278 <MX_GPIO_Init+0x12c>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b30      	ldr	r3, [pc, #192]	; (8000278 <MX_GPIO_Init+0x12c>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RED_Pin|GREEN_Pin|BLUE_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80001c6:	482d      	ldr	r0, [pc, #180]	; (800027c <MX_GPIO_Init+0x130>)
 80001c8:	f001 fae5 	bl	8001796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LA_IN1_Pin|LA_IN2_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2130      	movs	r1, #48	; 0x30
 80001d0:	482b      	ldr	r0, [pc, #172]	; (8000280 <MX_GPIO_Init+0x134>)
 80001d2:	f001 fae0 	bl	8001796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HA_IN1_Pin|HA_IN2_Pin|XSHUT3_Pin|XSHUT2_Pin
 80001d6:	2200      	movs	r2, #0
 80001d8:	f247 3133 	movw	r1, #29491	; 0x7333
 80001dc:	4829      	ldr	r0, [pc, #164]	; (8000284 <MX_GPIO_Init+0x138>)
 80001de:	f001 fada 	bl	8001796 <HAL_GPIO_WritePin>
                          |XSHUT1_Pin|HB_IN2_Pin|HB_IN1_Pin|LB_IN2_Pin
                          |LB_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin;
 80001e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4820      	ldr	r0, [pc, #128]	; (800027c <MX_GPIO_Init+0x130>)
 80001fc:	f001 f930 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LA_IN1_Pin|LA_IN2_Pin;
 8000200:	2330      	movs	r3, #48	; 0x30
 8000202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000204:	2301      	movs	r3, #1
 8000206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000208:	2300      	movs	r3, #0
 800020a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020c:	2302      	movs	r3, #2
 800020e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000210:	f107 0310 	add.w	r3, r7, #16
 8000214:	4619      	mov	r1, r3
 8000216:	481a      	ldr	r0, [pc, #104]	; (8000280 <MX_GPIO_Init+0x134>)
 8000218:	f001 f922 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = HA_IN1_Pin|HA_IN2_Pin|XSHUT3_Pin|XSHUT2_Pin
 800021c:	f247 3333 	movw	r3, #29491	; 0x7333
 8000220:	613b      	str	r3, [r7, #16]
                          |XSHUT1_Pin|HB_IN2_Pin|HB_IN1_Pin|LB_IN2_Pin
                          |LB_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000222:	2301      	movs	r3, #1
 8000224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000226:	2300      	movs	r3, #0
 8000228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022a:	2302      	movs	r3, #2
 800022c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800022e:	f107 0310 	add.w	r3, r7, #16
 8000232:	4619      	mov	r1, r3
 8000234:	4813      	ldr	r0, [pc, #76]	; (8000284 <MX_GPIO_Init+0x138>)
 8000236:	f001 f913 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LINE2_Pin;
 800023a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800023e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000240:	2300      	movs	r3, #0
 8000242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000244:	2302      	movs	r3, #2
 8000246:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LINE2_GPIO_Port, &GPIO_InitStruct);
 8000248:	f107 0310 	add.w	r3, r7, #16
 800024c:	4619      	mov	r1, r3
 800024e:	480d      	ldr	r0, [pc, #52]	; (8000284 <MX_GPIO_Init+0x138>)
 8000250:	f001 f906 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LINE1_Pin|START_Pin;
 8000254:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000258:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800025e:	2302      	movs	r3, #2
 8000260:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000262:	f107 0310 	add.w	r3, r7, #16
 8000266:	4619      	mov	r1, r3
 8000268:	4805      	ldr	r0, [pc, #20]	; (8000280 <MX_GPIO_Init+0x134>)
 800026a:	f001 f8f9 	bl	8001460 <HAL_GPIO_Init>

}
 800026e:	bf00      	nop
 8000270:	3720      	adds	r7, #32
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000
 800027c:	40011000 	.word	0x40011000
 8000280:	40010800 	.word	0x40010800
 8000284:	40010c00 	.word	0x40010c00

08000288 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800028c:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <MX_I2C2_Init+0x50>)
 800028e:	4a13      	ldr	r2, [pc, #76]	; (80002dc <MX_I2C2_Init+0x54>)
 8000290:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000292:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <MX_I2C2_Init+0x50>)
 8000294:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <MX_I2C2_Init+0x58>)
 8000296:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <MX_I2C2_Init+0x50>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <MX_I2C2_Init+0x50>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <MX_I2C2_Init+0x50>)
 80002a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <MX_I2C2_Init+0x50>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <MX_I2C2_Init+0x50>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <MX_I2C2_Init+0x50>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <MX_I2C2_Init+0x50>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002c4:	4804      	ldr	r0, [pc, #16]	; (80002d8 <MX_I2C2_Init+0x50>)
 80002c6:	f001 fa7f 	bl	80017c8 <HAL_I2C_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002d0:	f000 fc80 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000034 	.word	0x20000034
 80002dc:	40005800 	.word	0x40005800
 80002e0:	000186a0 	.word	0x000186a0

080002e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ec:	f107 0310 	add.w	r3, r7, #16
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a16      	ldr	r2, [pc, #88]	; (8000358 <HAL_I2C_MspInit+0x74>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d124      	bne.n	800034e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <HAL_I2C_MspInit+0x78>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a14      	ldr	r2, [pc, #80]	; (800035c <HAL_I2C_MspInit+0x78>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <HAL_I2C_MspInit+0x78>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0308 	and.w	r3, r3, #8
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800031c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000320:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000322:	2312      	movs	r3, #18
 8000324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000326:	2303      	movs	r3, #3
 8000328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	4619      	mov	r1, r3
 8000330:	480b      	ldr	r0, [pc, #44]	; (8000360 <HAL_I2C_MspInit+0x7c>)
 8000332:	f001 f895 	bl	8001460 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <HAL_I2C_MspInit+0x78>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	4a08      	ldr	r2, [pc, #32]	; (800035c <HAL_I2C_MspInit+0x78>)
 800033c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000340:	61d3      	str	r3, [r2, #28]
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <HAL_I2C_MspInit+0x78>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800034e:	bf00      	nop
 8000350:	3720      	adds	r7, #32
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40005800 	.word	0x40005800
 800035c:	40021000 	.word	0x40021000
 8000360:	40010c00 	.word	0x40010c00

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 ff10 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f8b2 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f7ff feec 	bl	800014c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000374:	f7ff ff88 	bl	8000288 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000378:	f000 fc94 	bl	8000ca4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800037c:	f000 fd0a 	bl	8000d94 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000380:	f000 fd5c 	bl	8000e3c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000384:	f000 fe66 	bl	8001054 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  InitPeriph();
 8000388:	f000 f8e0 	bl	800054c <InitPeriph>

  // Wait for start command
  LED(1, 0, 1);
 800038c:	2201      	movs	r2, #1
 800038e:	2100      	movs	r1, #0
 8000390:	2001      	movs	r0, #1
 8000392:	f000 fbfb 	bl	8000b8c <LED>
  while (!Read(START_GPIO_Port, START_Pin)) {}
 8000396:	bf00      	nop
 8000398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800039c:	4847      	ldr	r0, [pc, #284]	; (80004bc <main+0x158>)
 800039e:	f001 f9e3 	bl	8001768 <HAL_GPIO_ReadPin>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d0f7      	beq.n	8000398 <main+0x34>
  LED(1, 1, 1);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2101      	movs	r1, #1
 80003ac:	2001      	movs	r0, #1
 80003ae:	f000 fbed 	bl	8000b8c <LED>

  // Little jerk so that the arms can fall down into the active position
  Drive(FORWARD, 50, 100);
 80003b2:	2264      	movs	r2, #100	; 0x64
 80003b4:	2132      	movs	r1, #50	; 0x32
 80003b6:	2000      	movs	r0, #0
 80003b8:	f000 faba 	bl	8000930 <Drive>
  Drive(BACKWARD, 50, 100);
 80003bc:	2264      	movs	r2, #100	; 0x64
 80003be:	2132      	movs	r1, #50	; 0x32
 80003c0:	2001      	movs	r0, #1
 80003c2:	f000 fab5 	bl	8000930 <Drive>

  // Start the "weapon" spin
  SpinHands(50);
 80003c6:	2032      	movs	r0, #50	; 0x32
 80003c8:	f000 fbbc 	bl	8000b44 <SpinHands>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (!Read(START_GPIO_Port, START_Pin)) {
 80003cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003d0:	483a      	ldr	r0, [pc, #232]	; (80004bc <main+0x158>)
 80003d2:	f001 f9c9 	bl	8001768 <HAL_GPIO_ReadPin>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d107      	bne.n	80003ec <main+0x88>
		  LED(0,1,1);
 80003dc:	2201      	movs	r2, #1
 80003de:	2101      	movs	r1, #1
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 fbd3 	bl	8000b8c <LED>
		  StopHands();
 80003e6:	f000 fbc1 	bl	8000b6c <StopHands>
 80003ea:	e7ef      	b.n	80003cc <main+0x68>
	  }
	  else {
beginning:
 80003ec:	bf00      	nop
		  SpinHands(50);
 80003ee:	2032      	movs	r0, #50	; 0x32
 80003f0:	f000 fba8 	bl	8000b44 <SpinHands>
		  GetDistances();
 80003f4:	f000 fb80 	bl	8000af8 <GetDistances>

		  if (!Read(LINE1_GPIO_Port, LINE1_Pin)) {
 80003f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003fc:	482f      	ldr	r0, [pc, #188]	; (80004bc <main+0x158>)
 80003fe:	f001 f9b3 	bl	8001768 <HAL_GPIO_ReadPin>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d10c      	bne.n	8000422 <main+0xbe>
			  Drive(BACKWARD, 50, 1000);
 8000408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800040c:	2132      	movs	r1, #50	; 0x32
 800040e:	2001      	movs	r0, #1
 8000410:	f000 fa8e 	bl	8000930 <Drive>
			  Turn(LEFT, 50, 1000);
 8000414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000418:	2132      	movs	r1, #50	; 0x32
 800041a:	2002      	movs	r0, #2
 800041c:	f000 f9a4 	bl	8000768 <Turn>
			  goto beginning;
 8000420:	e7e5      	b.n	80003ee <main+0x8a>
		  }
		  else if (!Read(LINE2_GPIO_Port, LINE2_Pin)) {
 8000422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000426:	4826      	ldr	r0, [pc, #152]	; (80004c0 <main+0x15c>)
 8000428:	f001 f99e 	bl	8001768 <HAL_GPIO_ReadPin>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d10c      	bne.n	800044c <main+0xe8>
			  Drive(FORWARD, 50, 1000);
 8000432:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000436:	2132      	movs	r1, #50	; 0x32
 8000438:	2000      	movs	r0, #0
 800043a:	f000 fa79 	bl	8000930 <Drive>
			  Turn(RIGHT, 50, 1000);
 800043e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000442:	2132      	movs	r1, #50	; 0x32
 8000444:	2003      	movs	r0, #3
 8000446:	f000 f98f 	bl	8000768 <Turn>
			  goto beginning;
 800044a:	e7d0      	b.n	80003ee <main+0x8a>
		  }

		  if (distanceM < M_THRESH) {
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <main+0x160>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000454:	d20d      	bcs.n	8000472 <main+0x10e>
			  LED(1, 0, 1); // Green
 8000456:	2201      	movs	r2, #1
 8000458:	2100      	movs	r1, #0
 800045a:	2001      	movs	r0, #1
 800045c:	f000 fb96 	bl	8000b8c <LED>
			  Drive(FORWARD, 50, 1000);
 8000460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000464:	2132      	movs	r1, #50	; 0x32
 8000466:	2000      	movs	r0, #0
 8000468:	f000 fa62 	bl	8000930 <Drive>
			  previous = 1;
 800046c:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <main+0x164>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
		  }
		  if (distanceL < L_THRESH) {
 8000472:	4b16      	ldr	r3, [pc, #88]	; (80004cc <main+0x168>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	2bc7      	cmp	r3, #199	; 0xc7
 8000478:	d80d      	bhi.n	8000496 <main+0x132>
			  LED(0, 1, 1); // Red
 800047a:	2201      	movs	r2, #1
 800047c:	2101      	movs	r1, #1
 800047e:	2000      	movs	r0, #0
 8000480:	f000 fb84 	bl	8000b8c <LED>
			  Turn(LEFT, 50, 1000);
 8000484:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000488:	2132      	movs	r1, #50	; 0x32
 800048a:	2002      	movs	r0, #2
 800048c:	f000 f96c 	bl	8000768 <Turn>
			  previous = 2;
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <main+0x164>)
 8000492:	2202      	movs	r2, #2
 8000494:	701a      	strb	r2, [r3, #0]
		  }
		  if (distanceR < R_THRESH){
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <main+0x16c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2bc7      	cmp	r3, #199	; 0xc7
 800049c:	d896      	bhi.n	80003cc <main+0x68>
			  LED(1, 1, 0); // Blue
 800049e:	2200      	movs	r2, #0
 80004a0:	2101      	movs	r1, #1
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fb72 	bl	8000b8c <LED>
			  Turn(RIGHT, 50, 1000);
 80004a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004ac:	2132      	movs	r1, #50	; 0x32
 80004ae:	2003      	movs	r0, #3
 80004b0:	f000 f95a 	bl	8000768 <Turn>
			  previous = 3;
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <main+0x164>)
 80004b6:	2203      	movs	r2, #3
 80004b8:	701a      	strb	r2, [r3, #0]
	  if (!Read(START_GPIO_Port, START_Pin)) {
 80004ba:	e787      	b.n	80003cc <main+0x68>
 80004bc:	40010800 	.word	0x40010800
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	200000bc 	.word	0x200000bc
 80004c8:	200000f8 	.word	0x200000f8
 80004cc:	200000b8 	.word	0x200000b8
 80004d0:	200000c0 	.word	0x200000c0

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b090      	sub	sp, #64	; 0x40
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0318 	add.w	r3, r7, #24
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 fec6 	bl	8004274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004f6:	2301      	movs	r3, #1
 80004f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000500:	2300      	movs	r3, #0
 8000502:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000504:	f107 0318 	add.w	r3, r7, #24
 8000508:	4618      	mov	r0, r3
 800050a:	f002 f991 	bl	8002830 <HAL_RCC_OscConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000514:	f000 fb5e 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000518:	230f      	movs	r3, #15
 800051a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800051c:	2301      	movs	r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f002 fbff 	bl	8002d34 <HAL_RCC_ClockConfig>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800053c:	f000 fb4a 	bl	8000bd4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000540:	f002 fce2 	bl	8002f08 <HAL_RCC_EnableCSS>
}
 8000544:	bf00      	nop
 8000546:	3740      	adds	r7, #64	; 0x40
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <InitPeriph>:
		//LED(1,1,1);
	}
}*/

// Initializes all the required peripherals for Duubel V3
void InitPeriph(void) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af02      	add	r7, sp, #8
	// Motor PWM channels
	HAL_TIM_Base_Start(&htim2);
 8000552:	4839      	ldr	r0, [pc, #228]	; (8000638 <InitPeriph+0xec>)
 8000554:	f002 fda4 	bl	80030a0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000558:	2100      	movs	r1, #0
 800055a:	4837      	ldr	r0, [pc, #220]	; (8000638 <InitPeriph+0xec>)
 800055c:	f002 fe34 	bl	80031c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000560:	2104      	movs	r1, #4
 8000562:	4835      	ldr	r0, [pc, #212]	; (8000638 <InitPeriph+0xec>)
 8000564:	f002 fe30 	bl	80031c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000568:	210c      	movs	r1, #12
 800056a:	4833      	ldr	r0, [pc, #204]	; (8000638 <InitPeriph+0xec>)
 800056c:	f002 fe2c 	bl	80031c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000570:	2108      	movs	r1, #8
 8000572:	4831      	ldr	r0, [pc, #196]	; (8000638 <InitPeriph+0xec>)
 8000574:	f002 fe28 	bl	80031c8 <HAL_TIM_PWM_Start>

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 0);
 8000578:	4b2f      	ldr	r3, [pc, #188]	; (8000638 <InitPeriph+0xec>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2200      	movs	r2, #0
 800057e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, 0);
 8000580:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <InitPeriph+0xec>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2200      	movs	r2, #0
 8000586:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0);
 8000588:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <InitPeriph+0xec>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2200      	movs	r2, #0
 800058e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 0);
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <InitPeriph+0xec>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2200      	movs	r2, #0
 8000596:	641a      	str	r2, [r3, #64]	; 0x40

	// Hand motor direction
	Write(HA_IN1_GPIO_Port, HA_IN1_Pin, GPIO_PIN_RESET); //Right hand
 8000598:	2200      	movs	r2, #0
 800059a:	2101      	movs	r1, #1
 800059c:	4827      	ldr	r0, [pc, #156]	; (800063c <InitPeriph+0xf0>)
 800059e:	f001 f8fa 	bl	8001796 <HAL_GPIO_WritePin>
	Write(HA_IN2_GPIO_Port, HA_IN2_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2102      	movs	r1, #2
 80005a6:	4825      	ldr	r0, [pc, #148]	; (800063c <InitPeriph+0xf0>)
 80005a8:	f001 f8f5 	bl	8001796 <HAL_GPIO_WritePin>

	Write(HB_IN1_GPIO_Port, HB_IN1_Pin, GPIO_PIN_RESET); //Left hand
 80005ac:	2200      	movs	r2, #0
 80005ae:	2120      	movs	r1, #32
 80005b0:	4822      	ldr	r0, [pc, #136]	; (800063c <InitPeriph+0xf0>)
 80005b2:	f001 f8f0 	bl	8001796 <HAL_GPIO_WritePin>
	Write(HB_IN2_GPIO_Port, HB_IN2_Pin, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2110      	movs	r1, #16
 80005ba:	4820      	ldr	r0, [pc, #128]	; (800063c <InitPeriph+0xf0>)
 80005bc:	f001 f8eb 	bl	8001796 <HAL_GPIO_WritePin>

	// Motor encoders
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80005c0:	213c      	movs	r1, #60	; 0x3c
 80005c2:	481f      	ldr	r0, [pc, #124]	; (8000640 <InitPeriph+0xf4>)
 80005c4:	f002 ff30 	bl	8003428 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80005c8:	213c      	movs	r1, #60	; 0x3c
 80005ca:	481e      	ldr	r0, [pc, #120]	; (8000644 <InitPeriph+0xf8>)
 80005cc:	f002 ff2c 	bl	8003428 <HAL_TIM_Encoder_Start>

	// TOF sensors
	TOF_InitStruct(&right, &hi2c2, 0x30, XSHUT1_GPIO_Port, XSHUT1_Pin);
 80005d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <InitPeriph+0xf0>)
 80005d8:	2230      	movs	r2, #48	; 0x30
 80005da:	491b      	ldr	r1, [pc, #108]	; (8000648 <InitPeriph+0xfc>)
 80005dc:	481b      	ldr	r0, [pc, #108]	; (800064c <InitPeriph+0x100>)
 80005de:	f003 fb1f 	bl	8003c20 <TOF_InitStruct>
	TOF_InitStruct(&left, &hi2c2, 0x32, XSHUT2_GPIO_Port, XSHUT2_Pin);
 80005e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <InitPeriph+0xf0>)
 80005ea:	2232      	movs	r2, #50	; 0x32
 80005ec:	4916      	ldr	r1, [pc, #88]	; (8000648 <InitPeriph+0xfc>)
 80005ee:	4818      	ldr	r0, [pc, #96]	; (8000650 <InitPeriph+0x104>)
 80005f0:	f003 fb16 	bl	8003c20 <TOF_InitStruct>
	TOF_InitStruct(&middle, &hi2c2, 0x34, XSHUT3_GPIO_Port, XSHUT3_Pin);
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <InitPeriph+0xf0>)
 80005fc:	2234      	movs	r2, #52	; 0x34
 80005fe:	4912      	ldr	r1, [pc, #72]	; (8000648 <InitPeriph+0xfc>)
 8000600:	4814      	ldr	r0, [pc, #80]	; (8000654 <InitPeriph+0x108>)
 8000602:	f003 fb0d 	bl	8003c20 <TOF_InitStruct>
	TOF_BootMultipleSensors(sensors, 3);
 8000606:	2103      	movs	r1, #3
 8000608:	4813      	ldr	r0, [pc, #76]	; (8000658 <InitPeriph+0x10c>)
 800060a:	f003 fb4f 	bl	8003cac <TOF_BootMultipleSensors>

	// Turn the debug LED completely off
	Write(RED_GPIO_Port, RED_Pin, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <InitPeriph+0x110>)
 8000616:	f001 f8be 	bl	8001796 <HAL_GPIO_WritePin>
	Write(BLUE_GPIO_Port, BLUE_Pin, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000620:	480e      	ldr	r0, [pc, #56]	; (800065c <InitPeriph+0x110>)
 8000622:	f001 f8b8 	bl	8001796 <HAL_GPIO_WritePin>
	Write(GREEN_GPIO_Port, GREEN_Pin, 1);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <InitPeriph+0x110>)
 800062e:	f001 f8b2 	bl	8001796 <HAL_GPIO_WritePin>
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000fc 	.word	0x200000fc
 800063c:	40010c00 	.word	0x40010c00
 8000640:	20000144 	.word	0x20000144
 8000644:	2000018c 	.word	0x2000018c
 8000648:	20000034 	.word	0x20000034
 800064c:	200000a8 	.word	0x200000a8
 8000650:	20000088 	.word	0x20000088
 8000654:	20000098 	.word	0x20000098
 8000658:	20000000 	.word	0x20000000
 800065c:	40011000 	.word	0x40011000

08000660 <UpdateEncoder>:

// Updates encoder structs
void UpdateEncoder(encoder *encoderValue, TIM_HandleTypeDef *htim) {
 8000660:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000664:	b085      	sub	sp, #20
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000672:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if(!first_time) {
 8000674:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <UpdateEncoder+0x104>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d106      	bne.n	800068a <UpdateEncoder+0x2a>
		encoderValue->velocity = 0;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2200      	movs	r2, #0
 8000680:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 8000682:	4b38      	ldr	r3, [pc, #224]	; (8000764 <UpdateEncoder+0x104>)
 8000684:	2201      	movs	r2, #1
 8000686:	701a      	strb	r2, [r3, #0]
 8000688:	e052      	b.n	8000730 <UpdateEncoder+0xd0>
	}
	else {
		if(temp_counter == encoderValue ->lastCounterValue) {
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	691b      	ldr	r3, [r3, #16]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	429a      	cmp	r2, r3
 8000692:	d103      	bne.n	800069c <UpdateEncoder+0x3c>
			encoderValue->velocity = 0;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2200      	movs	r2, #0
 8000698:	801a      	strh	r2, [r3, #0]
 800069a:	e049      	b.n	8000730 <UpdateEncoder+0xd0>
		}
		else if(temp_counter > encoderValue ->lastCounterValue) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d922      	bls.n	80006ec <UpdateEncoder+0x8c>
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 0310 	and.w	r3, r3, #16
 80006b0:	2b10      	cmp	r3, #16
 80006b2:	d110      	bne.n	80006d6 <UpdateEncoder+0x76>
				encoderValue->velocity = -encoderValue->lastCounterValue - (__HAL_TIM_GET_AUTORELOAD(htim)-temp_counter);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006be:	b29b      	uxth	r3, r3
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b21a      	sxth	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	801a      	strh	r2, [r3, #0]
 80006d4:	e02c      	b.n	8000730 <UpdateEncoder+0xd0>
			}
			else {
				encoderValue->velocity = temp_counter - encoderValue->lastCounterValue;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	b29a      	uxth	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	691b      	ldr	r3, [r3, #16]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	801a      	strh	r2, [r3, #0]
 80006ea:	e021      	b.n	8000730 <UpdateEncoder+0xd0>
			}
		}
		else {
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0310 	and.w	r3, r3, #16
 80006f6:	2b10      	cmp	r3, #16
 80006f8:	d10a      	bne.n	8000710 <UpdateEncoder+0xb0>
				encoderValue->velocity = temp_counter - encoderValue->lastCounterValue;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	b29b      	uxth	r3, r3
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	b29b      	uxth	r3, r3
 8000708:	b21a      	sxth	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	801a      	strh	r2, [r3, #0]
 800070e:	e00f      	b.n	8000730 <UpdateEncoder+0xd0>
			}
			else {
				encoderValue->velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) - encoderValue->lastCounterValue);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	b29a      	uxth	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	b29b      	uxth	r3, r3
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	b29a      	uxth	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	b29b      	uxth	r3, r3
 8000726:	4413      	add	r3, r2
 8000728:	b29b      	uxth	r3, r3
 800072a:	b21a      	sxth	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	encoderValue->position += encoderValue->velocity;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	f9b1 1000 	ldrsh.w	r1, [r1]
 800073c:	b209      	sxth	r1, r1
 800073e:	17c8      	asrs	r0, r1, #31
 8000740:	460c      	mov	r4, r1
 8000742:	4605      	mov	r5, r0
 8000744:	eb12 0804 	adds.w	r8, r2, r4
 8000748:	eb43 0905 	adc.w	r9, r3, r5
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	e9c3 8902 	strd	r8, r9, [r3, #8]
	encoderValue->lastCounterValue = temp_counter;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	611a      	str	r2, [r3, #16]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000762:	4770      	bx	lr
 8000764:	200000f9 	.word	0x200000f9

08000768 <Turn>:

// Allows the robot to turn in place
void Turn(uint8_t direction, uint16_t speed, uint16_t amount) {
 8000768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800076c:	b091      	sub	sp, #68	; 0x44
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000776:	460b      	mov	r3, r1
 8000778:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800077a:	4613      	mov	r3, r2
 800077c:	857b      	strh	r3, [r7, #42]	; 0x2a
	int64_t previousA = legA.position;
 800077e:	4b65      	ldr	r3, [pc, #404]	; (8000914 <Turn+0x1ac>)
 8000780:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000784:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int64_t previousB = legB.position;
 8000788:	4b63      	ldr	r3, [pc, #396]	; (8000918 <Turn+0x1b0>)
 800078a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800078e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	if (direction == RIGHT) { // Turn Right
 8000792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000796:	2b03      	cmp	r3, #3
 8000798:	d15e      	bne.n	8000858 <Turn+0xf0>
		// CW setup
		Write(LA_IN1_GPIO_Port, LA_IN1_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2110      	movs	r1, #16
 800079e:	485f      	ldr	r0, [pc, #380]	; (800091c <Turn+0x1b4>)
 80007a0:	f000 fff9 	bl	8001796 <HAL_GPIO_WritePin>
		Write(LA_IN2_GPIO_Port, LA_IN2_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	485c      	ldr	r0, [pc, #368]	; (800091c <Turn+0x1b4>)
 80007aa:	f000 fff4 	bl	8001796 <HAL_GPIO_WritePin>

		// CCW setup
		Write(LB_IN1_GPIO_Port, LB_IN1_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b4:	485a      	ldr	r0, [pc, #360]	; (8000920 <Turn+0x1b8>)
 80007b6:	f000 ffee 	bl	8001796 <HAL_GPIO_WritePin>
		Write(LB_IN2_GPIO_Port, LB_IN2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c0:	4857      	ldr	r0, [pc, #348]	; (8000920 <Turn+0x1b8>)
 80007c2:	f000 ffe8 	bl	8001796 <HAL_GPIO_WritePin>

		// Speed set
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, speed); // LB
 80007c6:	4b57      	ldr	r3, [pc, #348]	; (8000924 <Turn+0x1bc>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80007cc:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, speed); // LA
 80007ce:	4b55      	ldr	r3, [pc, #340]	; (8000924 <Turn+0x1bc>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80007d4:	641a      	str	r2, [r3, #64]	; 0x40

		while ((legA.position < previousA + amount) || (legB.position > previousB - amount)) {
 80007d6:	e007      	b.n	80007e8 <Turn+0x80>
			UpdateEncoder(&legA, &htim3);
 80007d8:	4953      	ldr	r1, [pc, #332]	; (8000928 <Turn+0x1c0>)
 80007da:	484e      	ldr	r0, [pc, #312]	; (8000914 <Turn+0x1ac>)
 80007dc:	f7ff ff40 	bl	8000660 <UpdateEncoder>
			UpdateEncoder(&legB, &htim4);
 80007e0:	4952      	ldr	r1, [pc, #328]	; (800092c <Turn+0x1c4>)
 80007e2:	484d      	ldr	r0, [pc, #308]	; (8000918 <Turn+0x1b0>)
 80007e4:	f7ff ff3c 	bl	8000660 <UpdateEncoder>
		while ((legA.position < previousA + amount) || (legB.position > previousB - amount)) {
 80007e8:	4b4a      	ldr	r3, [pc, #296]	; (8000914 <Turn+0x1ac>)
 80007ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80007ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80007f0:	2200      	movs	r2, #0
 80007f2:	623b      	str	r3, [r7, #32]
 80007f4:	627a      	str	r2, [r7, #36]	; 0x24
 80007f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80007fa:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 80007fe:	462c      	mov	r4, r5
 8000800:	18a4      	adds	r4, r4, r2
 8000802:	61bc      	str	r4, [r7, #24]
 8000804:	4634      	mov	r4, r6
 8000806:	eb44 0303 	adc.w	r3, r4, r3
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000810:	461a      	mov	r2, r3
 8000812:	4290      	cmp	r0, r2
 8000814:	4623      	mov	r3, r4
 8000816:	eb71 0303 	sbcs.w	r3, r1, r3
 800081a:	dbdd      	blt.n	80007d8 <Turn+0x70>
 800081c:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <Turn+0x1b0>)
 800081e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000822:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000824:	2200      	movs	r2, #0
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	617a      	str	r2, [r7, #20]
 800082a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800082e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000832:	4626      	mov	r6, r4
 8000834:	ebb2 0a06 	subs.w	sl, r2, r6
 8000838:	462c      	mov	r4, r5
 800083a:	eb63 0b04 	sbc.w	fp, r3, r4
 800083e:	4582      	cmp	sl, r0
 8000840:	eb7b 0301 	sbcs.w	r3, fp, r1
 8000844:	dbc8      	blt.n	80007d8 <Turn+0x70>
		}

		// Speed reset
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0); // LB
 8000846:	4b37      	ldr	r3, [pc, #220]	; (8000924 <Turn+0x1bc>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 0); // LA
 800084e:	4b35      	ldr	r3, [pc, #212]	; (8000924 <Turn+0x1bc>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2200      	movs	r2, #0
 8000854:	641a      	str	r2, [r3, #64]	; 0x40

		// Speed reset
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0); // HB
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 0); // HA
	}
}
 8000856:	e057      	b.n	8000908 <Turn+0x1a0>
		Write(LA_IN1_GPIO_Port, LA_IN1_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2110      	movs	r1, #16
 800085c:	482f      	ldr	r0, [pc, #188]	; (800091c <Turn+0x1b4>)
 800085e:	f000 ff9a 	bl	8001796 <HAL_GPIO_WritePin>
		Write(LA_IN2_GPIO_Port, LA_IN2_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2120      	movs	r1, #32
 8000866:	482d      	ldr	r0, [pc, #180]	; (800091c <Turn+0x1b4>)
 8000868:	f000 ff95 	bl	8001796 <HAL_GPIO_WritePin>
		Write(LB_IN1_GPIO_Port, LB_IN1_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000872:	482b      	ldr	r0, [pc, #172]	; (8000920 <Turn+0x1b8>)
 8000874:	f000 ff8f 	bl	8001796 <HAL_GPIO_WritePin>
		Write(LB_IN2_GPIO_Port, LB_IN2_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087e:	4828      	ldr	r0, [pc, #160]	; (8000920 <Turn+0x1b8>)
 8000880:	f000 ff89 	bl	8001796 <HAL_GPIO_WritePin>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, speed); // HB
 8000884:	4b27      	ldr	r3, [pc, #156]	; (8000924 <Turn+0x1bc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800088a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, speed); // HA
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <Turn+0x1bc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000892:	641a      	str	r2, [r3, #64]	; 0x40
		while ((legA.position > previousA - amount) || (legB.position < previousB + amount)) {
 8000894:	e007      	b.n	80008a6 <Turn+0x13e>
			UpdateEncoder(&legA, &htim3);
 8000896:	4924      	ldr	r1, [pc, #144]	; (8000928 <Turn+0x1c0>)
 8000898:	481e      	ldr	r0, [pc, #120]	; (8000914 <Turn+0x1ac>)
 800089a:	f7ff fee1 	bl	8000660 <UpdateEncoder>
			UpdateEncoder(&legB, &htim4);
 800089e:	4923      	ldr	r1, [pc, #140]	; (800092c <Turn+0x1c4>)
 80008a0:	481d      	ldr	r0, [pc, #116]	; (8000918 <Turn+0x1b0>)
 80008a2:	f7ff fedd 	bl	8000660 <UpdateEncoder>
		while ((legA.position > previousA - amount) || (legB.position < previousB + amount)) {
 80008a6:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <Turn+0x1ac>)
 80008a8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80008ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008ae:	2200      	movs	r2, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	60fa      	str	r2, [r7, #12]
 80008b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80008b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80008bc:	4656      	mov	r6, sl
 80008be:	ebb2 0806 	subs.w	r8, r2, r6
 80008c2:	465e      	mov	r6, fp
 80008c4:	eb63 0906 	sbc.w	r9, r3, r6
 80008c8:	4580      	cmp	r8, r0
 80008ca:	eb79 0301 	sbcs.w	r3, r9, r1
 80008ce:	dbe2      	blt.n	8000896 <Turn+0x12e>
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <Turn+0x1b0>)
 80008d2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80008d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008d8:	2200      	movs	r2, #0
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	607a      	str	r2, [r7, #4]
 80008de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80008e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80008e6:	4656      	mov	r6, sl
 80008e8:	18b4      	adds	r4, r6, r2
 80008ea:	465e      	mov	r6, fp
 80008ec:	eb46 0503 	adc.w	r5, r6, r3
 80008f0:	42a0      	cmp	r0, r4
 80008f2:	eb71 0305 	sbcs.w	r3, r1, r5
 80008f6:	dbce      	blt.n	8000896 <Turn+0x12e>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0); // HB
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <Turn+0x1bc>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2200      	movs	r2, #0
 80008fe:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 0); // HA
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <Turn+0x1bc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2200      	movs	r2, #0
 8000906:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000908:	bf00      	nop
 800090a:	3744      	adds	r7, #68	; 0x44
 800090c:	46bd      	mov	sp, r7
 800090e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000912:	bf00      	nop
 8000914:	200000c8 	.word	0x200000c8
 8000918:	200000e0 	.word	0x200000e0
 800091c:	40010800 	.word	0x40010800
 8000920:	40010c00 	.word	0x40010c00
 8000924:	200000fc 	.word	0x200000fc
 8000928:	20000144 	.word	0x20000144
 800092c:	2000018c 	.word	0x2000018c

08000930 <Drive>:

// Drives forward or backward the given amount
void Drive(uint8_t direction, uint16_t speed, uint16_t amount) {
 8000930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000934:	b090      	sub	sp, #64	; 0x40
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800093e:	460b      	mov	r3, r1
 8000940:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000942:	4613      	mov	r3, r2
 8000944:	857b      	strh	r3, [r7, #42]	; 0x2a
	int64_t previousA = legA.position;
 8000946:	4b65      	ldr	r3, [pc, #404]	; (8000adc <Drive+0x1ac>)
 8000948:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800094c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int64_t previousB = legB.position;
 8000950:	4b63      	ldr	r3, [pc, #396]	; (8000ae0 <Drive+0x1b0>)
 8000952:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000956:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	if (direction == FORWARD) { // Forward
 800095a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800095e:	2b00      	cmp	r3, #0
 8000960:	d15e      	bne.n	8000a20 <Drive+0xf0>
		// CW setup
		Write(LA_IN1_GPIO_Port, LA_IN1_Pin, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2110      	movs	r1, #16
 8000966:	485f      	ldr	r0, [pc, #380]	; (8000ae4 <Drive+0x1b4>)
 8000968:	f000 ff15 	bl	8001796 <HAL_GPIO_WritePin>
		Write(LA_IN2_GPIO_Port, LA_IN2_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2120      	movs	r1, #32
 8000970:	485c      	ldr	r0, [pc, #368]	; (8000ae4 <Drive+0x1b4>)
 8000972:	f000 ff10 	bl	8001796 <HAL_GPIO_WritePin>

		// CW setup
		Write(LB_IN1_GPIO_Port, LB_IN1_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097c:	485a      	ldr	r0, [pc, #360]	; (8000ae8 <Drive+0x1b8>)
 800097e:	f000 ff0a 	bl	8001796 <HAL_GPIO_WritePin>
		Write(LB_IN2_GPIO_Port, LB_IN2_Pin, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000988:	4857      	ldr	r0, [pc, #348]	; (8000ae8 <Drive+0x1b8>)
 800098a:	f000 ff04 	bl	8001796 <HAL_GPIO_WritePin>

		// Speed set
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, speed); // LB
 800098e:	4b57      	ldr	r3, [pc, #348]	; (8000aec <Drive+0x1bc>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000994:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, speed); // LA
 8000996:	4b55      	ldr	r3, [pc, #340]	; (8000aec <Drive+0x1bc>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800099c:	641a      	str	r2, [r3, #64]	; 0x40

		while ((legA.position < previousA + amount) || (legB.position < previousB + amount)) {
 800099e:	e007      	b.n	80009b0 <Drive+0x80>
			UpdateEncoder(&legA, &htim3);
 80009a0:	4953      	ldr	r1, [pc, #332]	; (8000af0 <Drive+0x1c0>)
 80009a2:	484e      	ldr	r0, [pc, #312]	; (8000adc <Drive+0x1ac>)
 80009a4:	f7ff fe5c 	bl	8000660 <UpdateEncoder>
			UpdateEncoder(&legB, &htim4);
 80009a8:	4952      	ldr	r1, [pc, #328]	; (8000af4 <Drive+0x1c4>)
 80009aa:	484d      	ldr	r0, [pc, #308]	; (8000ae0 <Drive+0x1b0>)
 80009ac:	f7ff fe58 	bl	8000660 <UpdateEncoder>
		while ((legA.position < previousA + amount) || (legB.position < previousB + amount)) {
 80009b0:	4b4a      	ldr	r3, [pc, #296]	; (8000adc <Drive+0x1ac>)
 80009b2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80009b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80009b8:	2200      	movs	r2, #0
 80009ba:	623b      	str	r3, [r7, #32]
 80009bc:	627a      	str	r2, [r7, #36]	; 0x24
 80009be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80009c2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80009c6:	4644      	mov	r4, r8
 80009c8:	18a4      	adds	r4, r4, r2
 80009ca:	61bc      	str	r4, [r7, #24]
 80009cc:	464c      	mov	r4, r9
 80009ce:	eb44 0303 	adc.w	r3, r4, r3
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80009d8:	461a      	mov	r2, r3
 80009da:	4290      	cmp	r0, r2
 80009dc:	4623      	mov	r3, r4
 80009de:	eb71 0303 	sbcs.w	r3, r1, r3
 80009e2:	dbdd      	blt.n	80009a0 <Drive+0x70>
 80009e4:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <Drive+0x1b0>)
 80009e6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80009ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80009ec:	2200      	movs	r2, #0
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	617a      	str	r2, [r7, #20]
 80009f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80009f6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80009fa:	46a4      	mov	ip, r4
 80009fc:	eb1c 0a02 	adds.w	sl, ip, r2
 8000a00:	462c      	mov	r4, r5
 8000a02:	eb44 0b03 	adc.w	fp, r4, r3
 8000a06:	4550      	cmp	r0, sl
 8000a08:	eb71 030b 	sbcs.w	r3, r1, fp
 8000a0c:	dbc8      	blt.n	80009a0 <Drive+0x70>
		}

		// Speed reset
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0); // LB
 8000a0e:	4b37      	ldr	r3, [pc, #220]	; (8000aec <Drive+0x1bc>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2200      	movs	r2, #0
 8000a14:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 0); // LA
 8000a16:	4b35      	ldr	r3, [pc, #212]	; (8000aec <Drive+0x1bc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	641a      	str	r2, [r3, #64]	; 0x40

		// Speed reset
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0); // HB
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 0); // HA
	}
}
 8000a1e:	e058      	b.n	8000ad2 <Drive+0x1a2>
		Write(LA_IN1_GPIO_Port, LA_IN1_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2110      	movs	r1, #16
 8000a24:	482f      	ldr	r0, [pc, #188]	; (8000ae4 <Drive+0x1b4>)
 8000a26:	f000 feb6 	bl	8001796 <HAL_GPIO_WritePin>
		Write(LA_IN2_GPIO_Port, LA_IN2_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	482d      	ldr	r0, [pc, #180]	; (8000ae4 <Drive+0x1b4>)
 8000a30:	f000 feb1 	bl	8001796 <HAL_GPIO_WritePin>
		Write(LB_IN1_GPIO_Port, LB_IN1_Pin, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a3a:	482b      	ldr	r0, [pc, #172]	; (8000ae8 <Drive+0x1b8>)
 8000a3c:	f000 feab 	bl	8001796 <HAL_GPIO_WritePin>
		Write(LB_IN2_GPIO_Port, LB_IN2_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a46:	4828      	ldr	r0, [pc, #160]	; (8000ae8 <Drive+0x1b8>)
 8000a48:	f000 fea5 	bl	8001796 <HAL_GPIO_WritePin>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, speed); // HB
 8000a4c:	4b27      	ldr	r3, [pc, #156]	; (8000aec <Drive+0x1bc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000a52:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, speed); // HA
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <Drive+0x1bc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000a5a:	641a      	str	r2, [r3, #64]	; 0x40
		while ((legA.position > previousA - amount) || (legB.position > previousB - amount)) {
 8000a5c:	e007      	b.n	8000a6e <Drive+0x13e>
			UpdateEncoder(&legA, &htim3);
 8000a5e:	4924      	ldr	r1, [pc, #144]	; (8000af0 <Drive+0x1c0>)
 8000a60:	481e      	ldr	r0, [pc, #120]	; (8000adc <Drive+0x1ac>)
 8000a62:	f7ff fdfd 	bl	8000660 <UpdateEncoder>
			UpdateEncoder(&legB, &htim4);
 8000a66:	4923      	ldr	r1, [pc, #140]	; (8000af4 <Drive+0x1c4>)
 8000a68:	481d      	ldr	r0, [pc, #116]	; (8000ae0 <Drive+0x1b0>)
 8000a6a:	f7ff fdf9 	bl	8000660 <UpdateEncoder>
		while ((legA.position > previousA - amount) || (legB.position > previousB - amount)) {
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <Drive+0x1ac>)
 8000a70:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000a74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000a76:	2200      	movs	r2, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	60fa      	str	r2, [r7, #12]
 8000a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000a80:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8000a84:	46d4      	mov	ip, sl
 8000a86:	ebb2 080c 	subs.w	r8, r2, ip
 8000a8a:	46dc      	mov	ip, fp
 8000a8c:	eb63 090c 	sbc.w	r9, r3, ip
 8000a90:	4580      	cmp	r8, r0
 8000a92:	eb79 0301 	sbcs.w	r3, r9, r1
 8000a96:	dbe2      	blt.n	8000a5e <Drive+0x12e>
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <Drive+0x1b0>)
 8000a9a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000a9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000aaa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8000aae:	46d4      	mov	ip, sl
 8000ab0:	ebb2 040c 	subs.w	r4, r2, ip
 8000ab4:	46dc      	mov	ip, fp
 8000ab6:	eb63 050c 	sbc.w	r5, r3, ip
 8000aba:	4284      	cmp	r4, r0
 8000abc:	eb75 0301 	sbcs.w	r3, r5, r1
 8000ac0:	dbcd      	blt.n	8000a5e <Drive+0x12e>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0); // HB
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <Drive+0x1bc>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 0); // HA
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <Drive+0x1bc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ad2:	bf00      	nop
 8000ad4:	3740      	adds	r7, #64	; 0x40
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000adc:	200000c8 	.word	0x200000c8
 8000ae0:	200000e0 	.word	0x200000e0
 8000ae4:	40010800 	.word	0x40010800
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	200000fc 	.word	0x200000fc
 8000af0:	20000144 	.word	0x20000144
 8000af4:	2000018c 	.word	0x2000018c

08000af8 <GetDistances>:

// Updates all distances
void GetDistances(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	distanceR = TOF_GetDistance(&right);
 8000afc:	480b      	ldr	r0, [pc, #44]	; (8000b2c <GetDistances+0x34>)
 8000afe:	f003 f94f 	bl	8003da0 <TOF_GetDistance>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <GetDistances+0x38>)
 8000b08:	601a      	str	r2, [r3, #0]
	distanceM = TOF_GetDistance(&middle);
 8000b0a:	480a      	ldr	r0, [pc, #40]	; (8000b34 <GetDistances+0x3c>)
 8000b0c:	f003 f948 	bl	8003da0 <TOF_GetDistance>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <GetDistances+0x40>)
 8000b16:	601a      	str	r2, [r3, #0]
	distanceL = TOF_GetDistance(&left);
 8000b18:	4808      	ldr	r0, [pc, #32]	; (8000b3c <GetDistances+0x44>)
 8000b1a:	f003 f941 	bl	8003da0 <TOF_GetDistance>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <GetDistances+0x48>)
 8000b24:	601a      	str	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000a8 	.word	0x200000a8
 8000b30:	200000c0 	.word	0x200000c0
 8000b34:	20000098 	.word	0x20000098
 8000b38:	200000bc 	.word	0x200000bc
 8000b3c:	20000088 	.word	0x20000088
 8000b40:	200000b8 	.word	0x200000b8

08000b44 <SpinHands>:
int _write(int file, char* ptr, int len) {
	HAL_UART_Transmit(&huart1, ptr, len, 1000);
	return len;
}

void SpinHands(uint16_t speed) {
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, speed);
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <SpinHands+0x24>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	88fa      	ldrh	r2, [r7, #6]
 8000b54:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, speed);
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SpinHands+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	88fa      	ldrh	r2, [r7, #6]
 8000b5c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	200000fc 	.word	0x200000fc

08000b6c <StopHands>:

void StopHands(void) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 0);
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <StopHands+0x1c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, 0);
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <StopHands+0x1c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	200000fc 	.word	0x200000fc

08000b8c <LED>:

void LED(uint8_t red, uint8_t green, uint8_t blue) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
 8000b96:	460b      	mov	r3, r1
 8000b98:	71bb      	strb	r3, [r7, #6]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	717b      	strb	r3, [r7, #5]
	Write(RED_GPIO_Port, RED_Pin, red);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba6:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <LED+0x44>)
 8000ba8:	f000 fdf5 	bl	8001796 <HAL_GPIO_WritePin>
	Write(GREEN_GPIO_Port, GREEN_Pin, green);
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <LED+0x44>)
 8000bb6:	f000 fdee 	bl	8001796 <HAL_GPIO_WritePin>
	Write(BLUE_GPIO_Port, BLUE_Pin, blue);
 8000bba:	797b      	ldrb	r3, [r7, #5]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc2:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <LED+0x44>)
 8000bc4:	f000 fde7 	bl	8001796 <HAL_GPIO_WritePin>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40011000 	.word	0x40011000

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_MspInit+0x5c>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <HAL_MspInit+0x5c>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6193      	str	r3, [r2, #24]
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_MspInit+0x5c>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_MspInit+0x5c>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <HAL_MspInit+0x5c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	61d3      	str	r3, [r2, #28]
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_MspInit+0x5c>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_MspInit+0x60>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_MspInit+0x60>)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000c48:	f002 f9f2 	bl	8003030 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x8>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8e:	f000 fac3 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
	...

08000ca4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000caa:	f107 0320 	add.w	r3, r7, #32
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]
 8000cc2:	615a      	str	r2, [r3, #20]
 8000cc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc6:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <MX_TIM2_Init+0xec>)
 8000cc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ccc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cce:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <MX_TIM2_Init+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <MX_TIM2_Init+0xec>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <MX_TIM2_Init+0xec>)
 8000cdc:	2263      	movs	r2, #99	; 0x63
 8000cde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <MX_TIM2_Init+0xec>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <MX_TIM2_Init+0xec>)
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cec:	4828      	ldr	r0, [pc, #160]	; (8000d90 <MX_TIM2_Init+0xec>)
 8000cee:	f002 fa1b 	bl	8003128 <HAL_TIM_PWM_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000cf8:	f7ff ff6c 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d04:	f107 0320 	add.w	r3, r7, #32
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4821      	ldr	r0, [pc, #132]	; (8000d90 <MX_TIM2_Init+0xec>)
 8000d0c:	f002 fe52 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000d16:	f7ff ff5d 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d1a:	2360      	movs	r3, #96	; 0x60
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4817      	ldr	r0, [pc, #92]	; (8000d90 <MX_TIM2_Init+0xec>)
 8000d32:	f002 fc07 	bl	8003544 <HAL_TIM_PWM_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000d3c:	f7ff ff4a 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2204      	movs	r2, #4
 8000d44:	4619      	mov	r1, r3
 8000d46:	4812      	ldr	r0, [pc, #72]	; (8000d90 <MX_TIM2_Init+0xec>)
 8000d48:	f002 fbfc 	bl	8003544 <HAL_TIM_PWM_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d52:	f7ff ff3f 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2208      	movs	r2, #8
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <MX_TIM2_Init+0xec>)
 8000d5e:	f002 fbf1 	bl	8003544 <HAL_TIM_PWM_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000d68:	f7ff ff34 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	220c      	movs	r2, #12
 8000d70:	4619      	mov	r1, r3
 8000d72:	4807      	ldr	r0, [pc, #28]	; (8000d90 <MX_TIM2_Init+0xec>)
 8000d74:	f002 fbe6 	bl	8003544 <HAL_TIM_PWM_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000d7e:	f7ff ff29 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d82:	4803      	ldr	r0, [pc, #12]	; (8000d90 <MX_TIM2_Init+0xec>)
 8000d84:	f000 f936 	bl	8000ff4 <HAL_TIM_MspPostInit>

}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	; 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200000fc 	.word	0x200000fc

08000d94 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	; 0x30
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	2224      	movs	r2, #36	; 0x24
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 fa66 	bl	8004274 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db0:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <MX_TIM3_Init+0xa0>)
 8000db2:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <MX_TIM3_Init+0xa4>)
 8000db4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_TIM3_Init+0xa0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_TIM3_Init+0xa0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_TIM3_Init+0xa0>)
 8000dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_TIM3_Init+0xa0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_TIM3_Init+0xa0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dde:	2301      	movs	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dee:	2301      	movs	r3, #1
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <MX_TIM3_Init+0xa0>)
 8000e02:	f002 fa6f 	bl	80032e4 <HAL_TIM_Encoder_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e0c:	f7ff fee2 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_TIM3_Init+0xa0>)
 8000e1e:	f002 fdc9 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000e28:	f7ff fed4 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3730      	adds	r7, #48	; 0x30
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000144 	.word	0x20000144
 8000e38:	40000400 	.word	0x40000400

08000e3c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	; 0x30
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2224      	movs	r2, #36	; 0x24
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 fa12 	bl	8004274 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e58:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_TIM4_Init+0xa0>)
 8000e5a:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <MX_TIM4_Init+0xa4>)
 8000e5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_TIM4_Init+0xa0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_TIM4_Init+0xa0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <MX_TIM4_Init+0xa0>)
 8000e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_TIM4_Init+0xa0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_TIM4_Init+0xa0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e86:	2301      	movs	r3, #1
 8000e88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e96:	2301      	movs	r3, #1
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_TIM4_Init+0xa0>)
 8000eaa:	f002 fa1b 	bl	80032e4 <HAL_TIM_Encoder_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000eb4:	f7ff fe8e 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_TIM4_Init+0xa0>)
 8000ec6:	f002 fd75 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000ed0:	f7ff fe80 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3730      	adds	r7, #48	; 0x30
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000018c 	.word	0x2000018c
 8000ee0:	40000800 	.word	0x40000800

08000ee4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef4:	d10b      	bne.n	8000f0e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_TIM_PWM_MspInit+0x34>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_TIM_PWM_MspInit+0x34>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_TIM_PWM_MspInit+0x34>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0318 	add.w	r3, r7, #24
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a2a      	ldr	r2, [pc, #168]	; (8000fe0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d124      	bne.n	8000f86 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	61d3      	str	r3, [r2, #28]
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A1_Pin|ENC_A2_Pin;
 8000f6c:	23c0      	movs	r3, #192	; 0xc0
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	481a      	ldr	r0, [pc, #104]	; (8000fe8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000f80:	f000 fa6e 	bl	8001460 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000f84:	e028      	b.n	8000fd8 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(tim_encoderHandle->Instance==TIM4)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a18      	ldr	r2, [pc, #96]	; (8000fec <HAL_TIM_Encoder_MspInit+0xd0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d123      	bne.n	8000fd8 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	61d3      	str	r3, [r2, #28]
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_B2_Pin|ENC_B1_Pin;
 8000fc0:	23c0      	movs	r3, #192	; 0xc0
 8000fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000fd4:	f000 fa44 	bl	8001460 <HAL_GPIO_Init>
}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	; 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40000400 	.word	0x40000400
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010800 	.word	0x40010800
 8000fec:	40000800 	.word	0x40000800
 8000ff0:	40010c00 	.word	0x40010c00

08000ff4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001012:	d117      	bne.n	8001044 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_TIM_MspPostInit+0x58>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a0c      	ldr	r2, [pc, #48]	; (800104c <HAL_TIM_MspPostInit+0x58>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_TIM_MspPostInit+0x58>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = HB_PWM_Pin|HA_PWM_Pin|LB_PWM_Pin|LA_PWM_Pin;
 800102c:	230f      	movs	r3, #15
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2302      	movs	r3, #2
 8001036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4619      	mov	r1, r3
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <HAL_TIM_MspPostInit+0x5c>)
 8001040:	f000 fa0e 	bl	8001460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800

08001054 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_USART1_UART_Init+0x50>)
 800105c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800108c:	f002 fcea 	bl	8003a64 <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001096:	f7ff fd9d 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200001d4 	.word	0x200001d4
 80010a4:	40013800 	.word	0x40013800

080010a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <HAL_UART_MspInit+0x8c>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d131      	bne.n	800112c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_UART_MspInit+0x90>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a1a      	ldr	r2, [pc, #104]	; (8001138 <HAL_UART_MspInit+0x90>)
 80010ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_UART_MspInit+0x90>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_UART_MspInit+0x90>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a14      	ldr	r2, [pc, #80]	; (8001138 <HAL_UART_MspInit+0x90>)
 80010e6:	f043 0304 	orr.w	r3, r3, #4
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_UART_MspInit+0x90>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = U_TX_Pin;
 80010f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(U_TX_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <HAL_UART_MspInit+0x94>)
 800110e:	f000 f9a7 	bl	8001460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_RX_Pin;
 8001112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001116:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(U_RX_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_UART_MspInit+0x94>)
 8001128:	f000 f99a 	bl	8001460 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800112c:	bf00      	nop
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40013800 	.word	0x40013800
 8001138:	40021000 	.word	0x40021000
 800113c:	40010800 	.word	0x40010800

08001140 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001140:	f7ff fda9 	bl	8000c96 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001144:	480b      	ldr	r0, [pc, #44]	; (8001174 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001146:	490c      	ldr	r1, [pc, #48]	; (8001178 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001148:	4a0c      	ldr	r2, [pc, #48]	; (800117c <LoopFillZerobss+0x16>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a09      	ldr	r2, [pc, #36]	; (8001180 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800115c:	4c09      	ldr	r4, [pc, #36]	; (8001184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116a:	f003 f88b 	bl	8004284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800116e:	f7ff f8f9 	bl	8000364 <main>
  bx lr
 8001172:	4770      	bx	lr
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800117c:	08004374 	.word	0x08004374
  ldr r2, =_sbss
 8001180:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001184:	20000324 	.word	0x20000324

08001188 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_IRQHandler>
	...

0800118c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x28>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x28>)
 8001196:	f043 0310 	orr.w	r3, r3, #16
 800119a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f92b 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fd1a 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40022000 	.word	0x40022000

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f935 	bl	8001446 <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f4:	f000 f90b 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000000c 	.word	0x2000000c
 8001210:	20000014 	.word	0x20000014
 8001214:	20000010 	.word	0x20000010

08001218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_IncTick+0x1c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_IncTick+0x20>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a03      	ldr	r2, [pc, #12]	; (8001238 <HAL_IncTick+0x20>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	20000014 	.word	0x20000014
 8001238:	2000021c 	.word	0x2000021c

0800123c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b02      	ldr	r3, [pc, #8]	; (800124c <HAL_GetTick+0x10>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	2000021c 	.word	0x2000021c

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff fff0 	bl	800123c <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffe0 	bl	800123c <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000014 	.word	0x20000014

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d8:	f7ff ff90 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff49 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff5e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff90 	bl	8001350 <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5f 	bl	80012fc <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffb0 	bl	80013b4 <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b08b      	sub	sp, #44	; 0x2c
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	e169      	b.n	8001748 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001474:	2201      	movs	r2, #1
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	429a      	cmp	r2, r3
 800148e:	f040 8158 	bne.w	8001742 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	4a9a      	ldr	r2, [pc, #616]	; (8001700 <HAL_GPIO_Init+0x2a0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d05e      	beq.n	800155a <HAL_GPIO_Init+0xfa>
 800149c:	4a98      	ldr	r2, [pc, #608]	; (8001700 <HAL_GPIO_Init+0x2a0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d875      	bhi.n	800158e <HAL_GPIO_Init+0x12e>
 80014a2:	4a98      	ldr	r2, [pc, #608]	; (8001704 <HAL_GPIO_Init+0x2a4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d058      	beq.n	800155a <HAL_GPIO_Init+0xfa>
 80014a8:	4a96      	ldr	r2, [pc, #600]	; (8001704 <HAL_GPIO_Init+0x2a4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d86f      	bhi.n	800158e <HAL_GPIO_Init+0x12e>
 80014ae:	4a96      	ldr	r2, [pc, #600]	; (8001708 <HAL_GPIO_Init+0x2a8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d052      	beq.n	800155a <HAL_GPIO_Init+0xfa>
 80014b4:	4a94      	ldr	r2, [pc, #592]	; (8001708 <HAL_GPIO_Init+0x2a8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d869      	bhi.n	800158e <HAL_GPIO_Init+0x12e>
 80014ba:	4a94      	ldr	r2, [pc, #592]	; (800170c <HAL_GPIO_Init+0x2ac>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d04c      	beq.n	800155a <HAL_GPIO_Init+0xfa>
 80014c0:	4a92      	ldr	r2, [pc, #584]	; (800170c <HAL_GPIO_Init+0x2ac>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d863      	bhi.n	800158e <HAL_GPIO_Init+0x12e>
 80014c6:	4a92      	ldr	r2, [pc, #584]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d046      	beq.n	800155a <HAL_GPIO_Init+0xfa>
 80014cc:	4a90      	ldr	r2, [pc, #576]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d85d      	bhi.n	800158e <HAL_GPIO_Init+0x12e>
 80014d2:	2b12      	cmp	r3, #18
 80014d4:	d82a      	bhi.n	800152c <HAL_GPIO_Init+0xcc>
 80014d6:	2b12      	cmp	r3, #18
 80014d8:	d859      	bhi.n	800158e <HAL_GPIO_Init+0x12e>
 80014da:	a201      	add	r2, pc, #4	; (adr r2, 80014e0 <HAL_GPIO_Init+0x80>)
 80014dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e0:	0800155b 	.word	0x0800155b
 80014e4:	08001535 	.word	0x08001535
 80014e8:	08001547 	.word	0x08001547
 80014ec:	08001589 	.word	0x08001589
 80014f0:	0800158f 	.word	0x0800158f
 80014f4:	0800158f 	.word	0x0800158f
 80014f8:	0800158f 	.word	0x0800158f
 80014fc:	0800158f 	.word	0x0800158f
 8001500:	0800158f 	.word	0x0800158f
 8001504:	0800158f 	.word	0x0800158f
 8001508:	0800158f 	.word	0x0800158f
 800150c:	0800158f 	.word	0x0800158f
 8001510:	0800158f 	.word	0x0800158f
 8001514:	0800158f 	.word	0x0800158f
 8001518:	0800158f 	.word	0x0800158f
 800151c:	0800158f 	.word	0x0800158f
 8001520:	0800158f 	.word	0x0800158f
 8001524:	0800153d 	.word	0x0800153d
 8001528:	08001551 	.word	0x08001551
 800152c:	4a79      	ldr	r2, [pc, #484]	; (8001714 <HAL_GPIO_Init+0x2b4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001532:	e02c      	b.n	800158e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	623b      	str	r3, [r7, #32]
          break;
 800153a:	e029      	b.n	8001590 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	3304      	adds	r3, #4
 8001542:	623b      	str	r3, [r7, #32]
          break;
 8001544:	e024      	b.n	8001590 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	3308      	adds	r3, #8
 800154c:	623b      	str	r3, [r7, #32]
          break;
 800154e:	e01f      	b.n	8001590 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	330c      	adds	r3, #12
 8001556:	623b      	str	r3, [r7, #32]
          break;
 8001558:	e01a      	b.n	8001590 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001562:	2304      	movs	r3, #4
 8001564:	623b      	str	r3, [r7, #32]
          break;
 8001566:	e013      	b.n	8001590 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d105      	bne.n	800157c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001570:	2308      	movs	r3, #8
 8001572:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	611a      	str	r2, [r3, #16]
          break;
 800157a:	e009      	b.n	8001590 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800157c:	2308      	movs	r3, #8
 800157e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	615a      	str	r2, [r3, #20]
          break;
 8001586:	e003      	b.n	8001590 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
          break;
 800158c:	e000      	b.n	8001590 <HAL_GPIO_Init+0x130>
          break;
 800158e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2bff      	cmp	r3, #255	; 0xff
 8001594:	d801      	bhi.n	800159a <HAL_GPIO_Init+0x13a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	e001      	b.n	800159e <HAL_GPIO_Init+0x13e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3304      	adds	r3, #4
 800159e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2bff      	cmp	r3, #255	; 0xff
 80015a4:	d802      	bhi.n	80015ac <HAL_GPIO_Init+0x14c>
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	e002      	b.n	80015b2 <HAL_GPIO_Init+0x152>
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	3b08      	subs	r3, #8
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	210f      	movs	r1, #15
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	401a      	ands	r2, r3
 80015c4:	6a39      	ldr	r1, [r7, #32]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	431a      	orrs	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 80b1 	beq.w	8001742 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015e0:	4b4d      	ldr	r3, [pc, #308]	; (8001718 <HAL_GPIO_Init+0x2b8>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a4c      	ldr	r2, [pc, #304]	; (8001718 <HAL_GPIO_Init+0x2b8>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <HAL_GPIO_Init+0x2b8>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015f8:	4a48      	ldr	r2, [pc, #288]	; (800171c <HAL_GPIO_Init+0x2bc>)
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001604:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a40      	ldr	r2, [pc, #256]	; (8001720 <HAL_GPIO_Init+0x2c0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d013      	beq.n	800164c <HAL_GPIO_Init+0x1ec>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a3f      	ldr	r2, [pc, #252]	; (8001724 <HAL_GPIO_Init+0x2c4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d00d      	beq.n	8001648 <HAL_GPIO_Init+0x1e8>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a3e      	ldr	r2, [pc, #248]	; (8001728 <HAL_GPIO_Init+0x2c8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d007      	beq.n	8001644 <HAL_GPIO_Init+0x1e4>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a3d      	ldr	r2, [pc, #244]	; (800172c <HAL_GPIO_Init+0x2cc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_GPIO_Init+0x1e0>
 800163c:	2303      	movs	r3, #3
 800163e:	e006      	b.n	800164e <HAL_GPIO_Init+0x1ee>
 8001640:	2304      	movs	r3, #4
 8001642:	e004      	b.n	800164e <HAL_GPIO_Init+0x1ee>
 8001644:	2302      	movs	r3, #2
 8001646:	e002      	b.n	800164e <HAL_GPIO_Init+0x1ee>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <HAL_GPIO_Init+0x1ee>
 800164c:	2300      	movs	r3, #0
 800164e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001650:	f002 0203 	and.w	r2, r2, #3
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	4093      	lsls	r3, r2
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	4313      	orrs	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800165e:	492f      	ldr	r1, [pc, #188]	; (800171c <HAL_GPIO_Init+0x2bc>)
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	492c      	ldr	r1, [pc, #176]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001686:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	43db      	mvns	r3, r3
 800168e:	4928      	ldr	r1, [pc, #160]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 8001690:	4013      	ands	r3, r2
 8001692:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016a0:	4b23      	ldr	r3, [pc, #140]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	4922      	ldr	r1, [pc, #136]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	60cb      	str	r3, [r1, #12]
 80016ac:	e006      	b.n	80016bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	491e      	ldr	r1, [pc, #120]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	4918      	ldr	r1, [pc, #96]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	43db      	mvns	r3, r3
 80016de:	4914      	ldr	r1, [pc, #80]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d021      	beq.n	8001734 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	490e      	ldr	r1, [pc, #56]	; (8001730 <HAL_GPIO_Init+0x2d0>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
 80016fc:	e021      	b.n	8001742 <HAL_GPIO_Init+0x2e2>
 80016fe:	bf00      	nop
 8001700:	10320000 	.word	0x10320000
 8001704:	10310000 	.word	0x10310000
 8001708:	10220000 	.word	0x10220000
 800170c:	10210000 	.word	0x10210000
 8001710:	10120000 	.word	0x10120000
 8001714:	10110000 	.word	0x10110000
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	40010800 	.word	0x40010800
 8001724:	40010c00 	.word	0x40010c00
 8001728:	40011000 	.word	0x40011000
 800172c:	40011400 	.word	0x40011400
 8001730:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_GPIO_Init+0x304>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	43db      	mvns	r3, r3
 800173c:	4909      	ldr	r1, [pc, #36]	; (8001764 <HAL_GPIO_Init+0x304>)
 800173e:	4013      	ands	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	3301      	adds	r3, #1
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	f47f ae8e 	bne.w	8001474 <HAL_GPIO_Init+0x14>
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	372c      	adds	r7, #44	; 0x2c
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	40010400 	.word	0x40010400

08001768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e001      	b.n	800178a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	807b      	strh	r3, [r7, #2]
 80017a2:	4613      	mov	r3, r2
 80017a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a6:	787b      	ldrb	r3, [r7, #1]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ac:	887a      	ldrh	r2, [r7, #2]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017b2:	e003      	b.n	80017bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	041a      	lsls	r2, r3, #16
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	611a      	str	r2, [r3, #16]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
	...

080017c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e12b      	b.n	8001a32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7fe fd78 	bl	80002e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2224      	movs	r2, #36	; 0x24
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800181a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800182a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800182c:	f001 fbd8 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8001830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4a81      	ldr	r2, [pc, #516]	; (8001a3c <HAL_I2C_Init+0x274>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d807      	bhi.n	800184c <HAL_I2C_Init+0x84>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a80      	ldr	r2, [pc, #512]	; (8001a40 <HAL_I2C_Init+0x278>)
 8001840:	4293      	cmp	r3, r2
 8001842:	bf94      	ite	ls
 8001844:	2301      	movls	r3, #1
 8001846:	2300      	movhi	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	e006      	b.n	800185a <HAL_I2C_Init+0x92>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4a7d      	ldr	r2, [pc, #500]	; (8001a44 <HAL_I2C_Init+0x27c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	bf94      	ite	ls
 8001854:	2301      	movls	r3, #1
 8001856:	2300      	movhi	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0e7      	b.n	8001a32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4a78      	ldr	r2, [pc, #480]	; (8001a48 <HAL_I2C_Init+0x280>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0c9b      	lsrs	r3, r3, #18
 800186c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	430a      	orrs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a6a      	ldr	r2, [pc, #424]	; (8001a3c <HAL_I2C_Init+0x274>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d802      	bhi.n	800189c <HAL_I2C_Init+0xd4>
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	3301      	adds	r3, #1
 800189a:	e009      	b.n	80018b0 <HAL_I2C_Init+0xe8>
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	4a69      	ldr	r2, [pc, #420]	; (8001a4c <HAL_I2C_Init+0x284>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	3301      	adds	r3, #1
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	430b      	orrs	r3, r1
 80018b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	495c      	ldr	r1, [pc, #368]	; (8001a3c <HAL_I2C_Init+0x274>)
 80018cc:	428b      	cmp	r3, r1
 80018ce:	d819      	bhi.n	8001904 <HAL_I2C_Init+0x13c>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1e59      	subs	r1, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fbb1 f3f3 	udiv	r3, r1, r3
 80018de:	1c59      	adds	r1, r3, #1
 80018e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018e4:	400b      	ands	r3, r1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <HAL_I2C_Init+0x138>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1e59      	subs	r1, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fe:	e051      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001900:	2304      	movs	r3, #4
 8001902:	e04f      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d111      	bne.n	8001930 <HAL_I2C_Init+0x168>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1e58      	subs	r0, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	440b      	add	r3, r1
 800191a:	fbb0 f3f3 	udiv	r3, r0, r3
 800191e:	3301      	adds	r3, #1
 8001920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	e012      	b.n	8001956 <HAL_I2C_Init+0x18e>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1e58      	subs	r0, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	0099      	lsls	r1, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	fbb0 f3f3 	udiv	r3, r0, r3
 8001946:	3301      	adds	r3, #1
 8001948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Init+0x196>
 800195a:	2301      	movs	r3, #1
 800195c:	e022      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10e      	bne.n	8001984 <HAL_I2C_Init+0x1bc>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1e58      	subs	r0, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6859      	ldr	r1, [r3, #4]
 800196e:	460b      	mov	r3, r1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	440b      	add	r3, r1
 8001974:	fbb0 f3f3 	udiv	r3, r0, r3
 8001978:	3301      	adds	r3, #1
 800197a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001982:	e00f      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1e58      	subs	r0, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	0099      	lsls	r1, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	fbb0 f3f3 	udiv	r3, r0, r3
 800199a:	3301      	adds	r3, #1
 800199c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	6809      	ldr	r1, [r1, #0]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6911      	ldr	r1, [r2, #16]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68d2      	ldr	r2, [r2, #12]
 80019de:	4311      	orrs	r1, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	000186a0 	.word	0x000186a0
 8001a40:	001e847f 	.word	0x001e847f
 8001a44:	003d08ff 	.word	0x003d08ff
 8001a48:	431bde83 	.word	0x431bde83
 8001a4c:	10624dd3 	.word	0x10624dd3

08001a50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	817b      	strh	r3, [r7, #10]
 8001a60:	4613      	mov	r3, r2
 8001a62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff fbea 	bl	800123c <HAL_GetTick>
 8001a68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	f040 80e0 	bne.w	8001c38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2319      	movs	r3, #25
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4970      	ldr	r1, [pc, #448]	; (8001c44 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fc9e 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e0d3      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_I2C_Master_Transmit+0x50>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e0cc      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d007      	beq.n	8001ac6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2221      	movs	r2, #33	; 0x21
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	893a      	ldrh	r2, [r7, #8]
 8001af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4a50      	ldr	r2, [pc, #320]	; (8001c48 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b08:	8979      	ldrh	r1, [r7, #10]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fb08 	bl	8002124 <I2C_MasterRequestWrite>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e08d      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b34:	e066      	b.n	8001c04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	6a39      	ldr	r1, [r7, #32]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 fd5c 	bl	80025f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00d      	beq.n	8001b62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d107      	bne.n	8001b5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e06b      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d11b      	bne.n	8001bd8 <HAL_I2C_Master_Transmit+0x188>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d017      	beq.n	8001bd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	781a      	ldrb	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	6a39      	ldr	r1, [r7, #32]
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 fd53 	bl	8002688 <I2C_WaitOnBTFFlagUntilTimeout>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00d      	beq.n	8001c04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d107      	bne.n	8001c00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e01a      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d194      	bne.n	8001b36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e000      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c38:	2302      	movs	r3, #2
  }
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	00100002 	.word	0x00100002
 8001c48:	ffff0000 	.word	0xffff0000

08001c4c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	461a      	mov	r2, r3
 8001c58:	460b      	mov	r3, r1
 8001c5a:	817b      	strh	r3, [r7, #10]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff faea 	bl	800123c <HAL_GetTick>
 8001c68:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	f040 824b 	bne.w	800210e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2319      	movs	r3, #25
 8001c7e:	2201      	movs	r2, #1
 8001c80:	497f      	ldr	r1, [pc, #508]	; (8001e80 <HAL_I2C_Master_Receive+0x234>)
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 fb9e 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e23e      	b.n	8002110 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_I2C_Master_Receive+0x54>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e237      	b.n	8002110 <HAL_I2C_Master_Receive+0x4c4>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d007      	beq.n	8001cc6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0201 	orr.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2222      	movs	r2, #34	; 0x22
 8001cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	893a      	ldrh	r2, [r7, #8]
 8001cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4a5f      	ldr	r2, [pc, #380]	; (8001e84 <HAL_I2C_Master_Receive+0x238>)
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d08:	8979      	ldrh	r1, [r7, #10]
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fa8a 	bl	8002228 <I2C_MasterRequestRead>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e1f8      	b.n	8002110 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d113      	bne.n	8001d4e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	e1cc      	b.n	80020e8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d11e      	bne.n	8001d94 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d66:	b672      	cpsid	i
}
 8001d68:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d90:	b662      	cpsie	i
}
 8001d92:	e035      	b.n	8001e00 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d11e      	bne.n	8001dda <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001daa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dd6:	b662      	cpsie	i
}
 8001dd8:	e012      	b.n	8001e00 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001de8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001e00:	e172      	b.n	80020e8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	f200 811f 	bhi.w	800204a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d123      	bne.n	8001e5c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fc7d 	bl	8002718 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e173      	b.n	8002110 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e5a:	e145      	b.n	80020e8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d152      	bne.n	8001f0a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <HAL_I2C_Master_Receive+0x23c>)
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 faa8 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e148      	b.n	8002110 <HAL_I2C_Master_Receive+0x4c4>
 8001e7e:	bf00      	nop
 8001e80:	00100002 	.word	0x00100002
 8001e84:	ffff0000 	.word	0xffff0000
 8001e88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8c:	b672      	cpsid	i
}
 8001e8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ed2:	b662      	cpsie	i
}
 8001ed4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f08:	e0ee      	b.n	80020e8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f10:	2200      	movs	r2, #0
 8001f12:	4981      	ldr	r1, [pc, #516]	; (8002118 <HAL_I2C_Master_Receive+0x4cc>)
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fa55 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0f5      	b.n	8002110 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f34:	b672      	cpsid	i
}
 8001f36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f6a:	4b6c      	ldr	r3, [pc, #432]	; (800211c <HAL_I2C_Master_Receive+0x4d0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	08db      	lsrs	r3, r3, #3
 8001f70:	4a6b      	ldr	r2, [pc, #428]	; (8002120 <HAL_I2C_Master_Receive+0x4d4>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	0a1a      	lsrs	r2, r3, #8
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00da      	lsls	r2, r3, #3
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d118      	bne.n	8001fc2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f043 0220 	orr.w	r2, r3, #32
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001fb2:	b662      	cpsie	i
}
 8001fb4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0a6      	b.n	8002110 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d1d9      	bne.n	8001f84 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002008:	b29b      	uxth	r3, r3
 800200a:	3b01      	subs	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002012:	b662      	cpsie	i
}
 8002014:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002048:	e04e      	b.n	80020e8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800204a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fb62 	bl	8002718 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e058      	b.n	8002110 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b04      	cmp	r3, #4
 800209c:	d124      	bne.n	80020e8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d107      	bne.n	80020b6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f47f ae88 	bne.w	8001e02 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800210e:	2302      	movs	r3, #2
  }
}
 8002110:	4618      	mov	r0, r3
 8002112:	3728      	adds	r7, #40	; 0x28
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	00010004 	.word	0x00010004
 800211c:	2000000c 	.word	0x2000000c
 8002120:	14f8b589 	.word	0x14f8b589

08002124 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	460b      	mov	r3, r1
 8002132:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b08      	cmp	r3, #8
 800213e:	d006      	beq.n	800214e <I2C_MasterRequestWrite+0x2a>
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d003      	beq.n	800214e <I2C_MasterRequestWrite+0x2a>
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800214c:	d108      	bne.n	8002160 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e00b      	b.n	8002178 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	2b12      	cmp	r3, #18
 8002166:	d107      	bne.n	8002178 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002176:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f91d 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00d      	beq.n	80021ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800219e:	d103      	bne.n	80021a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e035      	b.n	8002218 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021b4:	d108      	bne.n	80021c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021b6:	897b      	ldrh	r3, [r7, #10]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021c4:	611a      	str	r2, [r3, #16]
 80021c6:	e01b      	b.n	8002200 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021c8:	897b      	ldrh	r3, [r7, #10]
 80021ca:	11db      	asrs	r3, r3, #7
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f003 0306 	and.w	r3, r3, #6
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f063 030f 	orn	r3, r3, #15
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	490e      	ldr	r1, [pc, #56]	; (8002220 <I2C_MasterRequestWrite+0xfc>)
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f966 	bl	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e010      	b.n	8002218 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021f6:	897b      	ldrh	r3, [r7, #10]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4907      	ldr	r1, [pc, #28]	; (8002224 <I2C_MasterRequestWrite+0x100>)
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f956 	bl	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	00010008 	.word	0x00010008
 8002224:	00010002 	.word	0x00010002

08002228 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	460b      	mov	r3, r1
 8002236:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800224c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b08      	cmp	r3, #8
 8002252:	d006      	beq.n	8002262 <I2C_MasterRequestRead+0x3a>
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d003      	beq.n	8002262 <I2C_MasterRequestRead+0x3a>
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002260:	d108      	bne.n	8002274 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e00b      	b.n	800228c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	2b11      	cmp	r3, #17
 800227a:	d107      	bne.n	800228c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800228a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 f893 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b2:	d103      	bne.n	80022bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e079      	b.n	80023b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022c8:	d108      	bne.n	80022dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022ca:	897b      	ldrh	r3, [r7, #10]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	611a      	str	r2, [r3, #16]
 80022da:	e05f      	b.n	800239c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022dc:	897b      	ldrh	r3, [r7, #10]
 80022de:	11db      	asrs	r3, r3, #7
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f003 0306 	and.w	r3, r3, #6
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f063 030f 	orn	r3, r3, #15
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4930      	ldr	r1, [pc, #192]	; (80023bc <I2C_MasterRequestRead+0x194>)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f8dc 	bl	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e054      	b.n	80023b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800230a:	897b      	ldrh	r3, [r7, #10]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4929      	ldr	r1, [pc, #164]	; (80023c0 <I2C_MasterRequestRead+0x198>)
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f8cc 	bl	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e044      	b.n	80023b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 f831 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00d      	beq.n	8002384 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002376:	d103      	bne.n	8002380 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e017      	b.n	80023b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002384:	897b      	ldrh	r3, [r7, #10]
 8002386:	11db      	asrs	r3, r3, #7
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f003 0306 	and.w	r3, r3, #6
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f063 030e 	orn	r3, r3, #14
 8002394:	b2da      	uxtb	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4907      	ldr	r1, [pc, #28]	; (80023c0 <I2C_MasterRequestRead+0x198>)
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f888 	bl	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	00010008 	.word	0x00010008
 80023c0:	00010002 	.word	0x00010002

080023c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d4:	e048      	b.n	8002468 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023dc:	d044      	beq.n	8002468 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023de:	f7fe ff2d 	bl	800123c <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d302      	bcc.n	80023f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d139      	bne.n	8002468 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	0c1b      	lsrs	r3, r3, #16
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d10d      	bne.n	800241a <I2C_WaitOnFlagUntilTimeout+0x56>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	43da      	mvns	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	4013      	ands	r3, r2
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	e00c      	b.n	8002434 <I2C_WaitOnFlagUntilTimeout+0x70>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	43da      	mvns	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4013      	ands	r3, r2
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	429a      	cmp	r2, r3
 8002438:	d116      	bne.n	8002468 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	f043 0220 	orr.w	r2, r3, #32
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e023      	b.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	0c1b      	lsrs	r3, r3, #16
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d10d      	bne.n	800248e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	43da      	mvns	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	4013      	ands	r3, r2
 800247e:	b29b      	uxth	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	e00c      	b.n	80024a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	43da      	mvns	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	4013      	ands	r3, r2
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf0c      	ite	eq
 80024a0:	2301      	moveq	r3, #1
 80024a2:	2300      	movne	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d093      	beq.n	80023d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024c6:	e071      	b.n	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d6:	d123      	bne.n	8002520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f043 0204 	orr.w	r2, r3, #4
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e067      	b.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002526:	d041      	beq.n	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002528:	f7fe fe88 	bl	800123c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	d302      	bcc.n	800253e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d136      	bne.n	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b01      	cmp	r3, #1
 8002546:	d10c      	bne.n	8002562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	43da      	mvns	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4013      	ands	r3, r2
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	bf14      	ite	ne
 800255a:	2301      	movne	r3, #1
 800255c:	2300      	moveq	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	e00b      	b.n	800257a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	43da      	mvns	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	4013      	ands	r3, r2
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d016      	beq.n	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f043 0220 	orr.w	r2, r3, #32
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e021      	b.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	0c1b      	lsrs	r3, r3, #16
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d10c      	bne.n	80025d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	43da      	mvns	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	4013      	ands	r3, r2
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf14      	ite	ne
 80025c8:	2301      	movne	r3, #1
 80025ca:	2300      	moveq	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	e00b      	b.n	80025e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4013      	ands	r3, r2
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bf14      	ite	ne
 80025e2:	2301      	movne	r3, #1
 80025e4:	2300      	moveq	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f47f af6d 	bne.w	80024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002604:	e034      	b.n	8002670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f8e3 	bl	80027d2 <I2C_IsAcknowledgeFailed>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e034      	b.n	8002680 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800261c:	d028      	beq.n	8002670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261e:	f7fe fe0d 	bl	800123c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	429a      	cmp	r2, r3
 800262c:	d302      	bcc.n	8002634 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d11d      	bne.n	8002670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d016      	beq.n	8002670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f043 0220 	orr.w	r2, r3, #32
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e007      	b.n	8002680 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267a:	2b80      	cmp	r3, #128	; 0x80
 800267c:	d1c3      	bne.n	8002606 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002694:	e034      	b.n	8002700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f89b 	bl	80027d2 <I2C_IsAcknowledgeFailed>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e034      	b.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ac:	d028      	beq.n	8002700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ae:	f7fe fdc5 	bl	800123c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d302      	bcc.n	80026c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d11d      	bne.n	8002700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d016      	beq.n	8002700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f043 0220 	orr.w	r2, r3, #32
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e007      	b.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b04      	cmp	r3, #4
 800270c:	d1c3      	bne.n	8002696 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002724:	e049      	b.n	80027ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b10      	cmp	r3, #16
 8002732:	d119      	bne.n	8002768 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0210 	mvn.w	r2, #16
 800273c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e030      	b.n	80027ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002768:	f7fe fd68 	bl	800123c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	429a      	cmp	r2, r3
 8002776:	d302      	bcc.n	800277e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d11d      	bne.n	80027ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d016      	beq.n	80027ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f043 0220 	orr.w	r2, r3, #32
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e007      	b.n	80027ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d1ae      	bne.n	8002726 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e8:	d11b      	bne.n	8002822 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f043 0204 	orr.w	r2, r3, #4
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
	...

08002830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e272      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8087 	beq.w	800295e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002850:	4b92      	ldr	r3, [pc, #584]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b04      	cmp	r3, #4
 800285a:	d00c      	beq.n	8002876 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800285c:	4b8f      	ldr	r3, [pc, #572]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d112      	bne.n	800288e <HAL_RCC_OscConfig+0x5e>
 8002868:	4b8c      	ldr	r3, [pc, #560]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002874:	d10b      	bne.n	800288e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002876:	4b89      	ldr	r3, [pc, #548]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d06c      	beq.n	800295c <HAL_RCC_OscConfig+0x12c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d168      	bne.n	800295c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e24c      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0x76>
 8002898:	4b80      	ldr	r3, [pc, #512]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a7f      	ldr	r2, [pc, #508]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 800289e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	e02e      	b.n	8002904 <HAL_RCC_OscConfig+0xd4>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x98>
 80028ae:	4b7b      	ldr	r3, [pc, #492]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a7a      	ldr	r2, [pc, #488]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b78      	ldr	r3, [pc, #480]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a77      	ldr	r2, [pc, #476]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e01d      	b.n	8002904 <HAL_RCC_OscConfig+0xd4>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0xbc>
 80028d2:	4b72      	ldr	r3, [pc, #456]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a71      	ldr	r2, [pc, #452]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b6f      	ldr	r3, [pc, #444]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a6e      	ldr	r2, [pc, #440]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0xd4>
 80028ec:	4b6b      	ldr	r3, [pc, #428]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a6a      	ldr	r2, [pc, #424]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a67      	ldr	r2, [pc, #412]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d013      	beq.n	8002934 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe fc96 	bl	800123c <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002914:	f7fe fc92 	bl	800123c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e200      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b5d      	ldr	r3, [pc, #372]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0xe4>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe fc82 	bl	800123c <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800293c:	f7fe fc7e 	bl	800123c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e1ec      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x10c>
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d063      	beq.n	8002a32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800296a:	4b4c      	ldr	r3, [pc, #304]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002976:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b08      	cmp	r3, #8
 8002980:	d11c      	bne.n	80029bc <HAL_RCC_OscConfig+0x18c>
 8002982:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d116      	bne.n	80029bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <HAL_RCC_OscConfig+0x176>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e1c0      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a6:	4b3d      	ldr	r3, [pc, #244]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4939      	ldr	r1, [pc, #228]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	e03a      	b.n	8002a32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c4:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <HAL_RCC_OscConfig+0x270>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7fe fc37 	bl	800123c <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d2:	f7fe fc33 	bl	800123c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e1a1      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4927      	ldr	r1, [pc, #156]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]
 8002a04:	e015      	b.n	8002a32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a06:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <HAL_RCC_OscConfig+0x270>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fc16 	bl	800123c <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a14:	f7fe fc12 	bl	800123c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e180      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d03a      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d019      	beq.n	8002a7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fbf6 	bl	800123c <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a54:	f7fe fbf2 	bl	800123c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e160      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a72:	2001      	movs	r0, #1
 8002a74:	f000 faf0 	bl	8003058 <RCC_Delay>
 8002a78:	e01c      	b.n	8002ab4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a80:	f7fe fbdc 	bl	800123c <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a86:	e00f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a88:	f7fe fbd8 	bl	800123c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d908      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e146      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	42420000 	.word	0x42420000
 8002aa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	4b92      	ldr	r3, [pc, #584]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e9      	bne.n	8002a88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80a6 	beq.w	8002c0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac6:	4b8b      	ldr	r3, [pc, #556]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10d      	bne.n	8002aee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	4b88      	ldr	r3, [pc, #544]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	4a87      	ldr	r2, [pc, #540]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	61d3      	str	r3, [r2, #28]
 8002ade:	4b85      	ldr	r3, [pc, #532]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aea:	2301      	movs	r3, #1
 8002aec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aee:	4b82      	ldr	r3, [pc, #520]	; (8002cf8 <HAL_RCC_OscConfig+0x4c8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d118      	bne.n	8002b2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afa:	4b7f      	ldr	r3, [pc, #508]	; (8002cf8 <HAL_RCC_OscConfig+0x4c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a7e      	ldr	r2, [pc, #504]	; (8002cf8 <HAL_RCC_OscConfig+0x4c8>)
 8002b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b06:	f7fe fb99 	bl	800123c <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0e:	f7fe fb95 	bl	800123c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b64      	cmp	r3, #100	; 0x64
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e103      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b20:	4b75      	ldr	r3, [pc, #468]	; (8002cf8 <HAL_RCC_OscConfig+0x4c8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x312>
 8002b34:	4b6f      	ldr	r3, [pc, #444]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4a6e      	ldr	r2, [pc, #440]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6213      	str	r3, [r2, #32]
 8002b40:	e02d      	b.n	8002b9e <HAL_RCC_OscConfig+0x36e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x334>
 8002b4a:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	4a69      	ldr	r2, [pc, #420]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	6213      	str	r3, [r2, #32]
 8002b56:	4b67      	ldr	r3, [pc, #412]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a66      	ldr	r2, [pc, #408]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	f023 0304 	bic.w	r3, r3, #4
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	e01c      	b.n	8002b9e <HAL_RCC_OscConfig+0x36e>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	d10c      	bne.n	8002b86 <HAL_RCC_OscConfig+0x356>
 8002b6c:	4b61      	ldr	r3, [pc, #388]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4a60      	ldr	r2, [pc, #384]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	6213      	str	r3, [r2, #32]
 8002b78:	4b5e      	ldr	r3, [pc, #376]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4a5d      	ldr	r2, [pc, #372]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	6213      	str	r3, [r2, #32]
 8002b84:	e00b      	b.n	8002b9e <HAL_RCC_OscConfig+0x36e>
 8002b86:	4b5b      	ldr	r3, [pc, #364]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4a5a      	ldr	r2, [pc, #360]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6213      	str	r3, [r2, #32]
 8002b92:	4b58      	ldr	r3, [pc, #352]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4a57      	ldr	r2, [pc, #348]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	f023 0304 	bic.w	r3, r3, #4
 8002b9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d015      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba6:	f7fe fb49 	bl	800123c <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7fe fb45 	bl	800123c <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0b1      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	4b4b      	ldr	r3, [pc, #300]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0ee      	beq.n	8002bae <HAL_RCC_OscConfig+0x37e>
 8002bd0:	e014      	b.n	8002bfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fb33 	bl	800123c <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe fb2f 	bl	800123c <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e09b      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	4b40      	ldr	r3, [pc, #256]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ee      	bne.n	8002bda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c02:	4b3c      	ldr	r3, [pc, #240]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4a3b      	ldr	r2, [pc, #236]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8087 	beq.w	8002d26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c18:	4b36      	ldr	r3, [pc, #216]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d061      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d146      	bne.n	8002cba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2c:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe fb03 	bl	800123c <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fe faff 	bl	800123c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e06d      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4c:	4b29      	ldr	r3, [pc, #164]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f0      	bne.n	8002c3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c60:	d108      	bne.n	8002c74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c62:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4921      	ldr	r1, [pc, #132]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c74:	4b1f      	ldr	r3, [pc, #124]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a19      	ldr	r1, [r3, #32]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	430b      	orrs	r3, r1
 8002c86:	491b      	ldr	r1, [pc, #108]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7fe fad3 	bl	800123c <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9a:	f7fe facf 	bl	800123c <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e03d      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x46a>
 8002cb8:	e035      	b.n	8002d26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fabc 	bl	800123c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe fab8 	bl	800123c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e026      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x498>
 8002ce6:	e01e      	b.n	8002d26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d107      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e019      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_OscConfig+0x500>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000

08002d34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0d0      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d910      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b67      	ldr	r3, [pc, #412]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 0207 	bic.w	r2, r3, #7
 8002d5e:	4965      	ldr	r1, [pc, #404]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b63      	ldr	r3, [pc, #396]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0b8      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d020      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d90:	4b59      	ldr	r3, [pc, #356]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a58      	ldr	r2, [pc, #352]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a52      	ldr	r2, [pc, #328]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002db2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db4:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	494d      	ldr	r1, [pc, #308]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d040      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d115      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e07f      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e073      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e06b      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4936      	ldr	r1, [pc, #216]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e24:	f7fe fa0a 	bl	800123c <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fe fa06 	bl	800123c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e053      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d210      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 0207 	bic.w	r2, r3, #7
 8002e6a:	4922      	ldr	r1, [pc, #136]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e032      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4916      	ldr	r1, [pc, #88]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eae:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	490e      	ldr	r1, [pc, #56]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ec2:	f000 f82d 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	490a      	ldr	r1, [pc, #40]	; (8002efc <HAL_RCC_ClockConfig+0x1c8>)
 8002ed4:	5ccb      	ldrb	r3, [r1, r3]
 8002ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eda:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <HAL_RCC_ClockConfig+0x1cc>)
 8002edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_RCC_ClockConfig+0x1d0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe f968 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	080042e4 	.word	0x080042e4
 8002f00:	2000000c 	.word	0x2000000c
 8002f04:	20000010 	.word	0x20000010

08002f08 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <HAL_RCC_EnableCSS+0x14>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
}
 8002f12:	bf00      	nop
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	4242004c 	.word	0x4242004c

08002f20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d002      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x30>
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0x36>
 8002f4e:	e027      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f52:	613b      	str	r3, [r7, #16]
      break;
 8002f54:	e027      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	0c9b      	lsrs	r3, r3, #18
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	4a17      	ldr	r2, [pc, #92]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f60:	5cd3      	ldrb	r3, [r2, r3]
 8002f62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d010      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	0c5b      	lsrs	r3, r3, #17
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	4a11      	ldr	r2, [pc, #68]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f7a:	5cd3      	ldrb	r3, [r2, r3]
 8002f7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f82:	fb03 f202 	mul.w	r2, r3, r2
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e004      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a0c      	ldr	r2, [pc, #48]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f94:	fb02 f303 	mul.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	613b      	str	r3, [r7, #16]
      break;
 8002f9e:	e002      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002fa2:	613b      	str	r3, [r7, #16]
      break;
 8002fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa6:	693b      	ldr	r3, [r7, #16]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	371c      	adds	r7, #28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	00f42400 	.word	0x00f42400
 8002fbc:	080042fc 	.word	0x080042fc
 8002fc0:	0800430c 	.word	0x0800430c
 8002fc4:	003d0900 	.word	0x003d0900
 8002fc8:	007a1200 	.word	0x007a1200

08002fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b02      	ldr	r3, [pc, #8]	; (8002fdc <HAL_RCC_GetHCLKFreq+0x10>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	2000000c 	.word	0x2000000c

08002fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fe4:	f7ff fff2 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	080042f4 	.word	0x080042f4

08003008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800300c:	f7ff ffde 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	0adb      	lsrs	r3, r3, #11
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4903      	ldr	r1, [pc, #12]	; (800302c <HAL_RCC_GetPCLK2Freq+0x24>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	080042f4 	.word	0x080042f4

08003030 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303c:	2b80      	cmp	r3, #128	; 0x80
 800303e:	d104      	bne.n	800304a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003040:	f000 f828 	bl	8003094 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003046:	2280      	movs	r2, #128	; 0x80
 8003048:	701a      	strb	r2, [r3, #0]
  }
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	4002100a 	.word	0x4002100a

08003058 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <RCC_Delay+0x34>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <RCC_Delay+0x38>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	0a5b      	lsrs	r3, r3, #9
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003074:	bf00      	nop
  }
  while (Delay --);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1e5a      	subs	r2, r3, #1
 800307a:	60fa      	str	r2, [r7, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f9      	bne.n	8003074 <RCC_Delay+0x1c>
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	2000000c 	.word	0x2000000c
 8003090:	10624dd3 	.word	0x10624dd3

08003094 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d001      	beq.n	80030b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e02d      	b.n	8003114 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c8:	d009      	beq.n	80030de <HAL_TIM_Base_Start+0x3e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a14      	ldr	r2, [pc, #80]	; (8003120 <HAL_TIM_Base_Start+0x80>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d004      	beq.n	80030de <HAL_TIM_Base_Start+0x3e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a12      	ldr	r2, [pc, #72]	; (8003124 <HAL_TIM_Base_Start+0x84>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d111      	bne.n	8003102 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b06      	cmp	r3, #6
 80030ee:	d010      	beq.n	8003112 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003100:	e007      	b.n	8003112 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800

08003128 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e041      	b.n	80031be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fd fec8 	bl	8000ee4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f000 faae 	bl	80036c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d109      	bne.n	80031ec <HAL_TIM_PWM_Start+0x24>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	e022      	b.n	8003232 <HAL_TIM_PWM_Start+0x6a>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d109      	bne.n	8003206 <HAL_TIM_PWM_Start+0x3e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	bf14      	ite	ne
 80031fe:	2301      	movne	r3, #1
 8003200:	2300      	moveq	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	e015      	b.n	8003232 <HAL_TIM_PWM_Start+0x6a>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b08      	cmp	r3, #8
 800320a:	d109      	bne.n	8003220 <HAL_TIM_PWM_Start+0x58>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e008      	b.n	8003232 <HAL_TIM_PWM_Start+0x6a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e04c      	b.n	80032d4 <HAL_TIM_PWM_Start+0x10c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d104      	bne.n	800324a <HAL_TIM_PWM_Start+0x82>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003248:	e013      	b.n	8003272 <HAL_TIM_PWM_Start+0xaa>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b04      	cmp	r3, #4
 800324e:	d104      	bne.n	800325a <HAL_TIM_PWM_Start+0x92>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003258:	e00b      	b.n	8003272 <HAL_TIM_PWM_Start+0xaa>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b08      	cmp	r3, #8
 800325e:	d104      	bne.n	800326a <HAL_TIM_PWM_Start+0xa2>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003268:	e003      	b.n	8003272 <HAL_TIM_PWM_Start+0xaa>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2202      	movs	r2, #2
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2201      	movs	r2, #1
 8003278:	6839      	ldr	r1, [r7, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fb75 	bl	800396a <TIM_CCxChannelCmd>
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d009      	beq.n	800329e <HAL_TIM_PWM_Start+0xd6>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a13      	ldr	r2, [pc, #76]	; (80032dc <HAL_TIM_PWM_Start+0x114>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_TIM_PWM_Start+0xd6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <HAL_TIM_PWM_Start+0x118>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d111      	bne.n	80032c2 <HAL_TIM_PWM_Start+0xfa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b06      	cmp	r3, #6
 80032ae:	d010      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x10a>
    {
      __HAL_TIM_ENABLE(htim);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c0:	e007      	b.n	80032d2 <HAL_TIM_PWM_Start+0x10a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0201 	orr.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40000800 	.word	0x40000800

080032e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e093      	b.n	8003420 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d106      	bne.n	8003312 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7fd fe05 	bl	8000f1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003328:	f023 0307 	bic.w	r3, r3, #7
 800332c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3304      	adds	r3, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4610      	mov	r0, r2
 800333a:	f000 f9c5 	bl	80036c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003366:	f023 0303 	bic.w	r3, r3, #3
 800336a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	4313      	orrs	r3, r2
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003384:	f023 030c 	bic.w	r3, r3, #12
 8003388:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003390:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	4313      	orrs	r3, r2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	011a      	lsls	r2, r3, #4
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	031b      	lsls	r3, r3, #12
 80033b4:	4313      	orrs	r3, r2
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80033c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	4313      	orrs	r3, r2
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003438:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003440:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003448:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003450:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d110      	bne.n	800347a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800345e:	7b7b      	ldrb	r3, [r7, #13]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d001      	beq.n	8003468 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e069      	b.n	800353c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003478:	e031      	b.n	80034de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b04      	cmp	r3, #4
 800347e:	d110      	bne.n	80034a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003480:	7bbb      	ldrb	r3, [r7, #14]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003486:	7b3b      	ldrb	r3, [r7, #12]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d001      	beq.n	8003490 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e055      	b.n	800353c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034a0:	e01d      	b.n	80034de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d108      	bne.n	80034ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a8:	7bbb      	ldrb	r3, [r7, #14]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034ae:	7b7b      	ldrb	r3, [r7, #13]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d102      	bne.n	80034ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034b4:	7b3b      	ldrb	r3, [r7, #12]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e03e      	b.n	800353c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_TIM_Encoder_Start+0xc4>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d008      	beq.n	80034fc <HAL_TIM_Encoder_Start+0xd4>
 80034ea:	e00f      	b.n	800350c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2201      	movs	r2, #1
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fa38 	bl	800396a <TIM_CCxChannelCmd>
      break;
 80034fa:	e016      	b.n	800352a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2201      	movs	r2, #1
 8003502:	2104      	movs	r1, #4
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fa30 	bl	800396a <TIM_CCxChannelCmd>
      break;
 800350a:	e00e      	b.n	800352a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2201      	movs	r2, #1
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fa28 	bl	800396a <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2201      	movs	r2, #1
 8003520:	2104      	movs	r1, #4
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fa21 	bl	800396a <TIM_CCxChannelCmd>
      break;
 8003528:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800355e:	2302      	movs	r3, #2
 8003560:	e0ae      	b.n	80036c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b0c      	cmp	r3, #12
 800356e:	f200 809f 	bhi.w	80036b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	080035ad 	.word	0x080035ad
 800357c:	080036b1 	.word	0x080036b1
 8003580:	080036b1 	.word	0x080036b1
 8003584:	080036b1 	.word	0x080036b1
 8003588:	080035ed 	.word	0x080035ed
 800358c:	080036b1 	.word	0x080036b1
 8003590:	080036b1 	.word	0x080036b1
 8003594:	080036b1 	.word	0x080036b1
 8003598:	0800362f 	.word	0x0800362f
 800359c:	080036b1 	.word	0x080036b1
 80035a0:	080036b1 	.word	0x080036b1
 80035a4:	080036b1 	.word	0x080036b1
 80035a8:	0800366f 	.word	0x0800366f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f8e4 	bl	8003780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0208 	orr.w	r2, r2, #8
 80035c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0204 	bic.w	r2, r2, #4
 80035d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	619a      	str	r2, [r3, #24]
      break;
 80035ea:	e064      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f900 	bl	80037f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6999      	ldr	r1, [r3, #24]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	021a      	lsls	r2, r3, #8
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	619a      	str	r2, [r3, #24]
      break;
 800362c:	e043      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f91d 	bl	8003874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0208 	orr.w	r2, r2, #8
 8003648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0204 	bic.w	r2, r2, #4
 8003658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69d9      	ldr	r1, [r3, #28]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	61da      	str	r2, [r3, #28]
      break;
 800366c:	e023      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 f93a 	bl	80038ee <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69d9      	ldr	r1, [r3, #28]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	021a      	lsls	r2, r3, #8
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	61da      	str	r2, [r3, #28]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
      break;
 80036b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036de:	d007      	beq.n	80036f0 <TIM_Base_SetConfig+0x28>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a25      	ldr	r2, [pc, #148]	; (8003778 <TIM_Base_SetConfig+0xb0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d003      	beq.n	80036f0 <TIM_Base_SetConfig+0x28>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a24      	ldr	r2, [pc, #144]	; (800377c <TIM_Base_SetConfig+0xb4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d108      	bne.n	8003702 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003708:	d007      	beq.n	800371a <TIM_Base_SetConfig+0x52>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1a      	ldr	r2, [pc, #104]	; (8003778 <TIM_Base_SetConfig+0xb0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d003      	beq.n	800371a <TIM_Base_SetConfig+0x52>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a19      	ldr	r2, [pc, #100]	; (800377c <TIM_Base_SetConfig+0xb4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d108      	bne.n	800372c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <TIM_Base_SetConfig+0xa6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f023 0201 	bic.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	611a      	str	r2, [r3, #16]
  }
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800

08003780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f023 0201 	bic.w	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0303 	bic.w	r3, r3, #3
 80037b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f023 0302 	bic.w	r3, r3, #2
 80037c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	621a      	str	r2, [r3, #32]
}
 80037ee:	bf00      	nop
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f023 0210 	bic.w	r2, r3, #16
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003826:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0320 	bic.w	r3, r3, #32
 8003842:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	621a      	str	r2, [r3, #32]
}
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f023 0303 	bic.w	r3, r3, #3
 80038aa:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038bc:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	621a      	str	r2, [r3, #32]
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b087      	sub	sp, #28
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800391c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003924:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	031b      	lsls	r3, r3, #12
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	621a      	str	r2, [r3, #32]
}
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800396a:	b480      	push	{r7}
 800396c:	b087      	sub	sp, #28
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2201      	movs	r2, #1
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	43db      	mvns	r3, r3
 800398c:	401a      	ands	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a1a      	ldr	r2, [r3, #32]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	fa01 f303 	lsl.w	r3, r1, r3
 80039a2:	431a      	orrs	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e041      	b.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0e:	d009      	beq.n	8003a24 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a11      	ldr	r2, [pc, #68]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a10      	ldr	r2, [pc, #64]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10c      	bne.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800

08003a64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e042      	b.n	8003afc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd fb0c 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	; 0x24
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f82b 	bl	8003b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003acc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003adc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b3e:	f023 030c 	bic.w	r3, r3, #12
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2c      	ldr	r2, [pc, #176]	; (8003c18 <UART_SetConfig+0x114>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d103      	bne.n	8003b74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b6c:	f7ff fa4c 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	e002      	b.n	8003b7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b74:	f7ff fa34 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8003b78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	009a      	lsls	r2, r3, #2
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b90:	4a22      	ldr	r2, [pc, #136]	; (8003c1c <UART_SetConfig+0x118>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	0119      	lsls	r1, r3, #4
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009a      	lsls	r2, r3, #2
 8003ba4:	441a      	add	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <UART_SetConfig+0x118>)
 8003bb2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	2064      	movs	r0, #100	; 0x64
 8003bba:	fb00 f303 	mul.w	r3, r0, r3
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	3332      	adds	r3, #50	; 0x32
 8003bc4:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <UART_SetConfig+0x118>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd0:	4419      	add	r1, r3
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	009a      	lsls	r2, r3, #2
 8003bdc:	441a      	add	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <UART_SetConfig+0x118>)
 8003bea:	fba3 0302 	umull	r0, r3, r3, r2
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	2064      	movs	r0, #100	; 0x64
 8003bf2:	fb00 f303 	mul.w	r3, r0, r3
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	3332      	adds	r3, #50	; 0x32
 8003bfc:	4a07      	ldr	r2, [pc, #28]	; (8003c1c <UART_SetConfig+0x118>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	f003 020f 	and.w	r2, r3, #15
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	440a      	add	r2, r1
 8003c0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40013800 	.word	0x40013800
 8003c1c:	51eb851f 	.word	0x51eb851f

08003c20 <TOF_InitStruct>:
#include "VL53L1X.h"
#include "VL53L1X_api.h"

VL53L1X* active_sensor;

void TOF_InitStruct(VL53L1X* const sensor, I2C_HandleTypeDef* hi2c, uint8_t address, GPIO_TypeDef* xshut_port, uint16_t xshut_pin) {
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71fb      	strb	r3, [r7, #7]
	sensor->hi2c = hi2c;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	601a      	str	r2, [r3, #0]
	sensor->address = address;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	79fa      	ldrb	r2, [r7, #7]
 8003c3a:	711a      	strb	r2, [r3, #4]

	sensor->xshut_port = xshut_port;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	609a      	str	r2, [r3, #8]
	sensor->xshut_pin = xshut_pin;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8b3a      	ldrh	r2, [r7, #24]
 8003c46:	819a      	strh	r2, [r3, #12]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr
	...

08003c54 <TOF_TurnOn>:

void TOF_TurnOn(VL53L1X* const sensor) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8003c5c:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <TOF_TurnOn+0x28>)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_SET);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6898      	ldr	r0, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	899b      	ldrh	r3, [r3, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f7fd fd92 	bl	8001796 <HAL_GPIO_WritePin>
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000220 	.word	0x20000220

08003c80 <TOF_TurnOff>:

void TOF_TurnOff(VL53L1X* const sensor) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8003c88:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <TOF_TurnOff+0x28>)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_RESET);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6898      	ldr	r0, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	899b      	ldrh	r3, [r3, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f7fd fd7c 	bl	8001796 <HAL_GPIO_WritePin>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000220 	.word	0x20000220

08003cac <TOF_BootMultipleSensors>:

void TOF_BootMultipleSensors(VL53L1X** const sensors, uint8_t count) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	70fb      	strb	r3, [r7, #3]
	for (uint8_t n = 0; n < count; n++) {
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]
 8003cbc:	e00a      	b.n	8003cd4 <TOF_BootMultipleSensors+0x28>
		TOF_TurnOff(sensors[n]);
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ffd9 	bl	8003c80 <TOF_TurnOff>
	for (uint8_t n = 0; n < count; n++) {
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
 8003cd4:	7bfa      	ldrb	r2, [r7, #15]
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d3f0      	bcc.n	8003cbe <TOF_BootMultipleSensors+0x12>
	}

	for (uint8_t n = 0; n < count; n++) {
 8003cdc:	2300      	movs	r3, #0
 8003cde:	73bb      	strb	r3, [r7, #14]
 8003ce0:	e00a      	b.n	8003cf8 <TOF_BootMultipleSensors+0x4c>
		TOF_BootSensor(sensors[n]);
 8003ce2:	7bbb      	ldrb	r3, [r7, #14]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 f80d 	bl	8003d0c <TOF_BootSensor>
	for (uint8_t n = 0; n < count; n++) {
 8003cf2:	7bbb      	ldrb	r3, [r7, #14]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	73bb      	strb	r3, [r7, #14]
 8003cf8:	7bba      	ldrb	r2, [r7, #14]
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d3f0      	bcc.n	8003ce2 <TOF_BootMultipleSensors+0x36>
	}
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <TOF_BootSensor>:

void TOF_BootSensor(VL53L1X* const sensor) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8003d14:	4a21      	ldr	r2, [pc, #132]	; (8003d9c <TOF_BootSensor+0x90>)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6013      	str	r3, [r2, #0]
	TOF_TurnOn(sensor);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff ff9a 	bl	8003c54 <TOF_TurnOn>
    HAL_Delay(2); // Sometimes this is too fast and line can't settle
 8003d20:	2002      	movs	r0, #2
 8003d22:	f7fd fa95 	bl	8001250 <HAL_Delay>

	// Assume sensor wasn't initialised and is using default address
	uint8_t correct_address = sensor->address;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	791b      	ldrb	r3, [r3, #4]
 8003d2a:	73fb      	strb	r3, [r7, #15]
	sensor->address = 0x52 >> 1;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2229      	movs	r2, #41	; 0x29
 8003d30:	711a      	strb	r2, [r3, #4]

	// Set new address to sensor if necessary
	uint16_t id = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	81bb      	strh	r3, [r7, #12]
	if (VL53L1X_GetSensorId(sensor->address, &id) == 0) {
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	791b      	ldrb	r3, [r3, #4]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f107 020c 	add.w	r2, r7, #12
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 f977 	bl	8004036 <VL53L1X_GetSensorId>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d107      	bne.n	8003d5e <TOF_BootSensor+0x52>
		VL53L1X_SetI2CAddress(sensor->address, correct_address);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	791b      	ldrb	r3, [r3, #4]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	4611      	mov	r1, r2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f83b 	bl	8003dd4 <VL53L1X_SetI2CAddress>
	}

	// Initialise sensor
	sensor->address = correct_address;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	711a      	strb	r2, [r3, #4]
	if (VL53L1X_GetSensorId(sensor->address, &id) == 0) {
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	791b      	ldrb	r3, [r3, #4]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	f107 020c 	add.w	r2, r7, #12
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 f960 	bl	8004036 <VL53L1X_GetSensorId>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <TOF_BootSensor+0x88>
		VL53L1X_SensorInit(sensor->address);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	791b      	ldrb	r3, [r3, #4]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f842 	bl	8003e0c <VL53L1X_SensorInit>
		VL53L1X_StartRanging(sensor->address);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	791b      	ldrb	r3, [r3, #4]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f8ea 	bl	8003f68 <VL53L1X_StartRanging>
	} else {
	    // Initialization failed
	}
}
 8003d94:	bf00      	nop
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000220 	.word	0x20000220

08003da0 <TOF_GetDistance>:
void TOF_StopRanging(VL53L1X* const sensor) {
	active_sensor = sensor;
	VL53L1X_StopRanging(sensor->address);
}

uint16_t TOF_GetDistance(VL53L1X* const sensor) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8003da8:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <TOF_GetDistance+0x30>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6013      	str	r3, [r2, #0]

	uint16_t reading = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	81fb      	strh	r3, [r7, #14]
	VL53L1X_GetDistance(sensor->address, &reading);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	791b      	ldrb	r3, [r3, #4]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f107 020e 	add.w	r2, r7, #14
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f959 	bl	8004076 <VL53L1X_GetDistance>
	return reading;
 8003dc4:	89fb      	ldrh	r3, [r7, #14]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000220 	.word	0x20000220

08003dd4 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	460a      	mov	r2, r1
 8003dde:	80fb      	strh	r3, [r7, #6]
 8003de0:	4613      	mov	r3, r2
 8003de2:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address);
 8003de8:	797a      	ldrb	r2, [r7, #5]
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	2101      	movs	r1, #1
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f99a 	bl	8004128 <VL53L1_WrByte>
 8003df4:	4603      	mov	r3, r0
 8003df6:	461a      	mov	r2, r3
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	73fb      	strb	r3, [r7, #15]
	return status;
 8003dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8003e1e:	232d      	movs	r3, #45	; 0x2d
 8003e20:	73bb      	strb	r3, [r7, #14]
 8003e22:	e011      	b.n	8003e48 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8003e24:	7bbb      	ldrb	r3, [r7, #14]
 8003e26:	b299      	uxth	r1, r3
 8003e28:	7bbb      	ldrb	r3, [r7, #14]
 8003e2a:	3b2d      	subs	r3, #45	; 0x2d
 8003e2c:	4a2c      	ldr	r2, [pc, #176]	; (8003ee0 <VL53L1X_SensorInit+0xd4>)
 8003e2e:	5cd2      	ldrb	r2, [r2, r3]
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f978 	bl	8004128 <VL53L1_WrByte>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8003e42:	7bbb      	ldrb	r3, [r7, #14]
 8003e44:	3301      	adds	r3, #1
 8003e46:	73bb      	strb	r3, [r7, #14]
 8003e48:	7bbb      	ldrb	r3, [r7, #14]
 8003e4a:	2b87      	cmp	r3, #135	; 0x87
 8003e4c:	d9ea      	bls.n	8003e24 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f889 	bl	8003f68 <VL53L1X_StartRanging>
 8003e56:	4603      	mov	r3, r0
 8003e58:	461a      	mov	r2, r3
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8003e64:	e00b      	b.n	8003e7e <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8003e66:	f107 020d 	add.w	r2, r7, #13
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f8aa 	bl	8003fc8 <VL53L1X_CheckForDataReady>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8003e7e:	7b7b      	ldrb	r3, [r7, #13]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f82c 	bl	8003ee4 <VL53L1X_ClearInterrupt>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	461a      	mov	r2, r3
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 f87d 	bl	8003f98 <VL53L1X_StopRanging>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	2209      	movs	r2, #9
 8003eac:	2108      	movs	r1, #8
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f93a 	bl	8004128 <VL53L1_WrByte>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	210b      	movs	r1, #11
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f92f 	bl	8004128 <VL53L1_WrByte>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	461a      	mov	r2, r3
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	73fb      	strb	r3, [r7, #15]
	return status;
 8003ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	08004310 	.word	0x08004310

08003ee4 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	2186      	movs	r1, #134	; 0x86
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f915 	bl	8004128 <VL53L1_WrByte>
 8003efe:	4603      	mov	r3, r0
 8003f00:	461a      	mov	r2, r3
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	73fb      	strb	r3, [r7, #15]
	return status;
 8003f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8003f24:	f107 020e 	add.w	r2, r7, #14
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	2130      	movs	r1, #48	; 0x30
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 f927 	bl	8004180 <VL53L1_RdByte>
 8003f32:	4603      	mov	r3, r0
 8003f34:	461a      	mov	r2, r3
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8003f3c:	7bbb      	ldrb	r3, [r7, #14]
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8003f46:	7bbb      	ldrb	r3, [r7, #14]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	701a      	strb	r2, [r3, #0]
	return status;
 8003f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	2240      	movs	r2, #64	; 0x40
 8003f7a:	2187      	movs	r1, #135	; 0x87
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f8d3 	bl	8004128 <VL53L1_WrByte>
 8003f82:	4603      	mov	r3, r0
 8003f84:	461a      	mov	r2, r3
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	73fb      	strb	r3, [r7, #15]
	return status;
 8003f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2187      	movs	r1, #135	; 0x87
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 f8bb 	bl	8004128 <VL53L1_WrByte>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	73fb      	strb	r3, [r7, #15]
	return status;
 8003fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	6039      	str	r1, [r7, #0]
 8003fd2:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8003fd8:	f107 020d 	add.w	r2, r7, #13
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ff97 	bl	8003f14 <VL53L1X_GetInterruptPolarity>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	461a      	mov	r2, r3
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8003ff0:	f107 020e 	add.w	r2, r7, #14
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	2131      	movs	r1, #49	; 0x31
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 f8c1 	bl	8004180 <VL53L1_RdByte>
 8003ffe:	4603      	mov	r3, r0
 8004000:	461a      	mov	r2, r3
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	4313      	orrs	r3, r2
 8004006:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8004008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10c      	bne.n	800402a <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8004010:	7bbb      	ldrb	r3, [r7, #14]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	7b7a      	ldrb	r2, [r7, #13]
 8004018:	4293      	cmp	r3, r2
 800401a:	d103      	bne.n	8004024 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
 8004022:	e002      	b.n	800402a <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800402a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <VL53L1X_GetSensorId>:
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	6039      	str	r1, [r7, #0]
 8004040:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	81bb      	strh	r3, [r7, #12]

	status |= VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 800404a:	f107 020c 	add.w	r2, r7, #12
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	f240 110f 	movw	r1, #271	; 0x10f
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f8cb 	bl	80041f0 <VL53L1_RdWord>
 800405a:	4603      	mov	r3, r0
 800405c:	461a      	mov	r2, r3
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	4313      	orrs	r3, r2
 8004062:	73fb      	strb	r3, [r7, #15]
	*sensorId = tmp;
 8004064:	89ba      	ldrh	r2, [r7, #12]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	801a      	strh	r2, [r3, #0]
	return status;
 800406a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <VL53L1X_GetDistance>:

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	4603      	mov	r3, r0
 800407e:	6039      	str	r1, [r7, #0]
 8004080:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8004086:	f107 020c 	add.w	r2, r7, #12
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2196      	movs	r1, #150	; 0x96
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f8ae 	bl	80041f0 <VL53L1_RdWord>
 8004094:	4603      	mov	r3, r0
 8004096:	461a      	mov	r2, r3
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	4313      	orrs	r3, r2
 800409c:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800409e:	89ba      	ldrh	r2, [r7, #12]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	801a      	strh	r2, [r3, #0]
	return status;
 80040a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_I2CWrite>:
#include "VL53L1X.h"
extern VL53L1X* active_sensor;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	4603      	mov	r3, r0
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	81fb      	strh	r3, [r7, #14]
	(void) (dev);
	return (int) HAL_I2C_Master_Transmit(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <_I2CWrite+0x38>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <_I2CWrite+0x38>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	791b      	ldrb	r3, [r3, #4]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	b299      	uxth	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2264      	movs	r2, #100	; 0x64
 80040d6:	9200      	str	r2, [sp, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	f7fd fcb9 	bl	8001a50 <HAL_I2C_Master_Transmit>
 80040de:	4603      	mov	r3, r0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000220 	.word	0x20000220

080040ec <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	4603      	mov	r3, r0
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	81fb      	strh	r3, [r7, #14]
	(void) (dev);
    return (int) HAL_I2C_Master_Receive(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <_I2CRead+0x38>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	4b08      	ldr	r3, [pc, #32]	; (8004124 <_I2CRead+0x38>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	791b      	ldrb	r3, [r3, #4]
 8004106:	b29b      	uxth	r3, r3
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	b299      	uxth	r1, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	b29b      	uxth	r3, r3
 8004110:	2264      	movs	r2, #100	; 0x64
 8004112:	9200      	str	r2, [sp, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	f7fd fd99 	bl	8001c4c <HAL_I2C_Master_Receive>
 800411a:	4603      	mov	r3, r0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20000220 	.word	0x20000220

08004128 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	80fb      	strh	r3, [r7, #6]
 8004132:	460b      	mov	r3, r1
 8004134:	80bb      	strh	r3, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800413a:	2300      	movs	r3, #0
 800413c:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800413e:	88bb      	ldrh	r3, [r7, #4]
 8004140:	0a1b      	lsrs	r3, r3, #8
 8004142:	b29b      	uxth	r3, r3
 8004144:	b2da      	uxtb	r2, r3
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <VL53L1_WrByte+0x54>)
 8004148:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800414a:	88bb      	ldrh	r3, [r7, #4]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <VL53L1_WrByte+0x54>)
 8004150:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8004152:	4a0a      	ldr	r2, [pc, #40]	; (800417c <VL53L1_WrByte+0x54>)
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	2203      	movs	r2, #3
 800415c:	4907      	ldr	r1, [pc, #28]	; (800417c <VL53L1_WrByte+0x54>)
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff ffa6 	bl	80040b0 <_I2CWrite>
 8004164:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800416c:	23f3      	movs	r3, #243	; 0xf3
 800416e:	73fb      	strb	r3, [r7, #15]
    }
    return Status;}
 8004170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000224 	.word	0x20000224

08004180 <VL53L1_RdByte>:
    }

    return Status;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	603a      	str	r2, [r7, #0]
 800418a:	80fb      	strh	r3, [r7, #6]
 800418c:	460b      	mov	r3, r1
 800418e:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004190:	2300      	movs	r3, #0
 8004192:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8004194:	88bb      	ldrh	r3, [r7, #4]
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	b29b      	uxth	r3, r3
 800419a:	b2da      	uxtb	r2, r3
 800419c:	4b13      	ldr	r3, [pc, #76]	; (80041ec <VL53L1_RdByte+0x6c>)
 800419e:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80041a0:	88bb      	ldrh	r3, [r7, #4]
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <VL53L1_RdByte+0x6c>)
 80041a6:	705a      	strb	r2, [r3, #1]

	status_int = _I2CWrite(dev, _I2CBuffer, 2);
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	2202      	movs	r2, #2
 80041ac:	490f      	ldr	r1, [pc, #60]	; (80041ec <VL53L1_RdByte+0x6c>)
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff ff7e 	bl	80040b0 <_I2CWrite>
 80041b4:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80041bc:	23f3      	movs	r3, #243	; 0xf3
 80041be:	73fb      	strb	r3, [r7, #15]
        goto done;
 80041c0:	e00d      	b.n	80041de <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(dev, data, 1);
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	2201      	movs	r2, #1
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff8f 	bl	80040ec <_I2CRead>
 80041ce:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80041d6:	23f3      	movs	r3, #243	; 0xf3
 80041d8:	73fb      	strb	r3, [r7, #15]
 80041da:	e000      	b.n	80041de <VL53L1_RdByte+0x5e>
    }
done:
 80041dc:	bf00      	nop

	return Status;
 80041de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000224 	.word	0x20000224

080041f0 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	603a      	str	r2, [r7, #0]
 80041fa:	80fb      	strh	r3, [r7, #6]
 80041fc:	460b      	mov	r3, r1
 80041fe:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004200:	2300      	movs	r3, #0
 8004202:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8004204:	88bb      	ldrh	r3, [r7, #4]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	b29b      	uxth	r3, r3
 800420a:	b2da      	uxtb	r2, r3
 800420c:	4b18      	ldr	r3, [pc, #96]	; (8004270 <VL53L1_RdWord+0x80>)
 800420e:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8004210:	88bb      	ldrh	r3, [r7, #4]
 8004212:	b2da      	uxtb	r2, r3
 8004214:	4b16      	ldr	r3, [pc, #88]	; (8004270 <VL53L1_RdWord+0x80>)
 8004216:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	2202      	movs	r2, #2
 800421c:	4914      	ldr	r1, [pc, #80]	; (8004270 <VL53L1_RdWord+0x80>)
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff ff46 	bl	80040b0 <_I2CWrite>
 8004224:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800422c:	23f3      	movs	r3, #243	; 0xf3
 800422e:	73fb      	strb	r3, [r7, #15]
        goto done;
 8004230:	e018      	b.n	8004264 <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	2202      	movs	r2, #2
 8004236:	490e      	ldr	r1, [pc, #56]	; (8004270 <VL53L1_RdWord+0x80>)
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff57 	bl	80040ec <_I2CRead>
 800423e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004246:	23f3      	movs	r3, #243	; 0xf3
 8004248:	73fb      	strb	r3, [r7, #15]
        goto done;
 800424a:	e00b      	b.n	8004264 <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <VL53L1_RdWord+0x80>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	b29a      	uxth	r2, r3
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <VL53L1_RdWord+0x80>)
 8004258:	785b      	ldrb	r3, [r3, #1]
 800425a:	b29b      	uxth	r3, r3
 800425c:	4413      	add	r3, r2
 800425e:	b29a      	uxth	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	801a      	strh	r2, [r3, #0]
done:
    return Status;}
 8004264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000224 	.word	0x20000224

08004274 <memset>:
 8004274:	4603      	mov	r3, r0
 8004276:	4402      	add	r2, r0
 8004278:	4293      	cmp	r3, r2
 800427a:	d100      	bne.n	800427e <memset+0xa>
 800427c:	4770      	bx	lr
 800427e:	f803 1b01 	strb.w	r1, [r3], #1
 8004282:	e7f9      	b.n	8004278 <memset+0x4>

08004284 <__libc_init_array>:
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	2600      	movs	r6, #0
 8004288:	4d0c      	ldr	r5, [pc, #48]	; (80042bc <__libc_init_array+0x38>)
 800428a:	4c0d      	ldr	r4, [pc, #52]	; (80042c0 <__libc_init_array+0x3c>)
 800428c:	1b64      	subs	r4, r4, r5
 800428e:	10a4      	asrs	r4, r4, #2
 8004290:	42a6      	cmp	r6, r4
 8004292:	d109      	bne.n	80042a8 <__libc_init_array+0x24>
 8004294:	f000 f81a 	bl	80042cc <_init>
 8004298:	2600      	movs	r6, #0
 800429a:	4d0a      	ldr	r5, [pc, #40]	; (80042c4 <__libc_init_array+0x40>)
 800429c:	4c0a      	ldr	r4, [pc, #40]	; (80042c8 <__libc_init_array+0x44>)
 800429e:	1b64      	subs	r4, r4, r5
 80042a0:	10a4      	asrs	r4, r4, #2
 80042a2:	42a6      	cmp	r6, r4
 80042a4:	d105      	bne.n	80042b2 <__libc_init_array+0x2e>
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ac:	4798      	blx	r3
 80042ae:	3601      	adds	r6, #1
 80042b0:	e7ee      	b.n	8004290 <__libc_init_array+0xc>
 80042b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b6:	4798      	blx	r3
 80042b8:	3601      	adds	r6, #1
 80042ba:	e7f2      	b.n	80042a2 <__libc_init_array+0x1e>
 80042bc:	0800436c 	.word	0x0800436c
 80042c0:	0800436c 	.word	0x0800436c
 80042c4:	0800436c 	.word	0x0800436c
 80042c8:	08004370 	.word	0x08004370

080042cc <_init>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	bf00      	nop
 80042d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d2:	bc08      	pop	{r3}
 80042d4:	469e      	mov	lr, r3
 80042d6:	4770      	bx	lr

080042d8 <_fini>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	bf00      	nop
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr
